@Tutorial(time: 20) { 
    @Intro(title: "Create a simple Scope") {
        Define a scope object with state member variables representing 
        a part of your app's status, define the events that may affect 
        this state, and create a view to display the state.
    }
    
    @Section(title: "Create a scope") {
        @ContentAndMedia {
            Scopes in Statoscope represent self-contained sections of your app's logic, managing state and reacting to user or system-driven events. Each scope contains its own member variables to track state, an `update` function to handle the defined events (called `When` cases), and can communicate with views or other components. 
            
            A simple use case is a counter, where we want to display the count value and allow the user to increment or decrement it by tapping buttons.
        }
        @Steps {
            @Step {
                Create a file `Counter.swift` and import the Statoscope library. This is the first step towards creating your counter scope. 
                Statoscope helps in defining your app’s state as a separate, modular component that can easily be tested.
                
                @Code(name: "Counter.swift", file: StateAndWhen-Counter-02.swift)
            }
            
            @Step {
                Define your state using member variables.
                
                We suggest using clear, sentence-like naming for state variables. This will make your code more readable and also simplify acceptance testing.
                
                In this case, `viewDisplaysTotalCount` will store the current counter value, which we will update later when a user interacts with the UI.
                
                @Code(name: "Counter.swift", file: StateAndWhen-Counter-02.swift)
            }
            
            @Step {
                Add the `When` events that can occur in your scope.
                
                The `When` cases represent the events that trigger state changes. Again, using sentence-like names for these events ensures that your code is both readable and self-explanatory in tests.
                
                @Code(name: "Counter.swift", file: StateAndWhen-Counter-03.swift)
            }
            
            @Step {
                Finally, define the `update` method that will contain your business logic.
                
                This method will be responsible for managing how your state evolves when events occur. For now, leave the method skeleton in place — we’ll return to it later.
                
                @Code(name: "Counter.swift", file: StateAndWhen-Counter-04.swift)
            }
            
            Before building the real scope implementation via the `update` method, we strongly recommend writing tests on top of the state + when models. However, we are moving forward and introducing tests as the last section of this document
                
            @Step {
                Now it’s time to implement the `update` method, which contains the state maintenance and business logic of your app’s scope.
                
                For this counter example, the logic involves updating the count when the user taps either the increment or decrement button, ensuring that the count never drops below zero.
                
                @Code(name: "Counter.swift", file: StateAndWhen-Counter-05.swift)
            }
            
            @Step {
                We will soon create a view to display the state. Since we’ll be 
                using SwiftUI, adopt the `ObservableObject` protocol and use `@Published` 
                for the state variables that the view will observe and reflect.
                
                @Code(name: "Counter.swift", file: StateAndWhen-Counter-06.swift)
            }
        }
    }
        
    @Section(title: "Create your view") {
        @ContentAndMedia {
            Now that we’ve set up the scope, it's time to build the view that will interact with this state. Using SwiftUI, we will create a simple view that displays the current count and provides buttons to increment or decrement the value. This will allow the user to interact with the scope's state.
            
            The view will automatically update when the state changes, thanks to the `ObservableObject` protocol and `@Published` properties.
        }
        @Steps {
            @Step {
                Let’s create our view. SwiftUI's declarative syntax will help you define this easily and make your source code straightforward.
                
                @Code(name: "CounterView", file: StateAndWhen-CounterView-01.swift) {
                    @Image(source: "StateAndWhen-CounterView-01.png")
                }
            }
            @Step {
                Let’s create our view. SwiftUI's declarative syntax will help you define this easily and make your source code straightforward.
                
                @Code(name: "CounterView", file: StateAndWhen-CounterView-02.swift)
            }
            @Step {
                In case you prefer a higher decoupling between state and view, adopt your common abstraction policy. Take a look at our preferred for inspiration:
                
                @Code(name: "CounterViewDecoupled", file: StateAndWhen-CounterView-03.swift)
            }
        }
    }

    @Section(title: "Write tests and acceptance criterias") {
        @ContentAndMedia {
            StatoscopeTesting is provided as part of the Statoscope library.
            
            One of the main goals of the Statoscope architecture is to achieve
            **ACCEPTANCE AS CODE**. This means your tests will closely align with the user’s acceptance criteria, making the testing process more intuitive and reflective of real user scenarios.
            
            Please notice how we've been' using sentence-like state variables such as "subjectVerbDescription". Therefore `When` cases naming results in a test description that mirrors an acceptance criteria definition.
        }
        @Steps {
            
            @Step {
                
                Create your test and import the StatoecopeTesting library
                
                @Code(name: "CounterTests.swift", file: StateAndWhen-CounterTests-01.swift)
            }
            
            @Step {
                
                Start providing an initial state for your State Scope with the GIVEN helper
                
                @Code(name: "CounterTests.swift", file: StateAndWhen-CounterTests-02.swift)
            }
            
            @Step {
                
                Keep writing synchronous events and their effects on the Scope state.
                
                @Code(name: "CounterTests.swift", file: StateAndWhen-CounterTests-03.swift)
            }
            
            @Step {
                
                ‼️‼️ Don't forget to call the `runTests` method
                
                Run the test to ensure the implementation works, and check if test description matches some human-readable acceptance criteria, it'd be great for all project collaborators or your future self.
                
                @Code(name: "CounterTests.swift", file: StateAndWhen-CounterTests-04.swift)
            }
            
            So far so good, we've built our first scope implementing a simple counter. The scope manages the state, the view displays it, and the user interacts with the scope through the UI. Furthermore we've writte the (integration) tests and acceptance criterias for this scope.
            
            Move to the next chapters to understand **Effects** and **Scope composition**, where we'll expand the functionality and connect multiple scopes together for more complex app features.
        }   
    }
}
