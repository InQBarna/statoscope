@Tutorial(time: 30) {
    @Intro(title: "Scopes") {
        Defining all state and When events in a single Statostore doesn't scale. We need to decide where exactly to split our state and events into separate state parts or Scopes. Sometimes separation is obvious and sometimes developers want to separate state and events that are inevitably coupled due to the nature of the business logic. However, this article will focus in how to separate the state of our apps in different scopes.
    }

    @Section(title: "Design scopes") {
        @ContentAndMedia {
            We will grab a "god object" that solves our app's use cases and will split into different state scopes.
        }
        @Steps {
            @Step {
                We will grab the example from the previous tutorial

                @Code(name: "NewsFeed.swift", file: 01-05-01-code-0001.swift)
            }
            
            @Step {
                Now let's extend the example to provide more features, for example: initialization loads such as remote feature toggle load, list and detail navigations.

                @Code(name: "NewsFeed.swift", file: 01-05-01-code-0002.swift)
            }
            
            We expect this business logic to grow in 3 different places: Feature toggle selection may be downloading remote config, or also display a selection ui for qa testers. Detail and list will be separated because they both will offer many features like: error handling, connectivity feedback, etc... We will split the current State and When cases into many scopes.
            
            @Step {
                First we will separate feature toggle loading from listing. Will keep the feature toggle management in the Newsfeed scope and remove everything else.

                @Code(name: "NewsFeed.swift", file: 01-05-01-code-0003.swift)
            }

            @Step {
                And now create a new scope NewsfeedList with the list + detail state and when events:

                @Code(name: "NewsFeed.swift", file: 01-05-01-code-0004.swift)
            }
            
            During initialization, the app may be in 2 different states: loading the feature toggles or in the listing. Variable atList being nil or having the correct value indicates that. Also, the variable atList connects the 2 different scopes we have right now.
            
            @Step {
                
                Connect the scopes with the property wrapper ChildScope. This will enable hierarchical dependency search and root middlewares provided by Statoscope.

                @Code(name: "NewsFeed.swift", file: 01-05-01-code-0005.swift)
            }
            
            @Step {
                And create a new NewsFeedArticle scope with the detail state and when events.

                @Code(name: "NewsFeed.swift", file: 01-05-01-code-0006.swift)
            }
            
            @Step {
                We will continue by removing the detail state and when events from the NewsFeedList scope

                @Code(name: "NewsFeed.swift", file: 01-05-01-code-0007.swift)
            }
            
            @Step {
                Note that some of the namings we chose at the beginning have some scope clarification, we can get rid of them, since they are already in their corresponding scope

                @Code(name: "NewsFeed.swift", file: 01-05-01-code-0008.swift)
            }

            Having 3 small state scopes makes development easier so we can focus on a small subset. Injected dependencies can also be fine-grained declared for every scope. However states are never completely isolated and they need some information to be shared across scopes. See the favoritesEnabled property that should be passed to subscopes for example. Favorites management also will be duplicated in both NewsFeedList and NewsFeedArtcle scope. One more piece you'll be missing when implementing the update methods will be a default When for subscopes to trigger the initial load of children scopes.
            
            @Step {
                Declare the when events that are triggered on Subscope load if necessary

                @Code(name: "NewsFeed.swift", file: 01-05-01-code-0009.swift)
            }
            By separating your states into hierarchical scopes you can focus on small state scopes and use cases. Choosing correct boundaries for your scope allows developing with strong focus on a small subset of your app state and events. However it is a difficult task, boundaries are not allways clear, or they change along project development, the longer you use the Statoscope library, the better boundaries will be clearer to the developer.
        }
    }
    @Section(title: "Views and scopes") {
        @ContentAndMedia {
            To understand how state is expressed by previous scopes an subscopes, let's create the corresponding views.
        }
        @Steps {
            @Step {
                Let's start with the first NewsFeedView, which only show a loading state of moves to the list view

                @Code(name: "NewsFeedView.swift", file: 01-05-02-code-0001.swift)
            }
            @Step {
                And add the NewsFeedListView, without implementing view navigation to detail

                @Code(name: "NewsFeedView.swift", file: 01-05-02-code-0002.swift)
            }
            
            Please note how In the NewsFeedView we didn't use any navigation stack. That's because user can't go back to Feature toggle selection screen, and then showing a child scope or not is straightforward: we just return it or not in the body with flow control.
            
            However from list to detail we want to use a NavigationLink or navigationDestination grabbing our programmatic navigation to the readingArticle subscope. We need to create binding for this.
            
            @Step {
                Let's focus on the NewsFeedListView

                @Code(name: "NewsFeedListView.swift", file: 01-05-02-code-0003.swift)
            }
            @Step {
                Manually build the bindings to adapt SwiftUI interfaces to our When-based event management

                @Code(name: "NewsFeedListView.swift", file: 01-05-02-code-0004.swift)
            }
            @Step {
                Although this mapping from state + when to a binding is easy, it needs a lot of boilerplate. Luckily we have helpers in the Statoscope library for such mappings and navigations:

                @Code(name: "NewsFeedListView.swift", file: 01-05-02-code-0005.swift)
            }
            @Step {
                Let's continue with de Article view

                @Code(name: "NewsFeedListView.swift", file: 01-05-02-code-0006.swift)
            }
            
            A natural boundary for state scopes separation are screens, since usually navigating from a list to a detail opens a brand new scope. Statoscope scope (and as a consequence memory) management is fully controlled at domain level, so SwiftUI declarative syntax and navigation needs to be adapted to this reality by mapping state (and Subscopes which are part of the state) and When events to bindings or closures. 
        }
    }
}
