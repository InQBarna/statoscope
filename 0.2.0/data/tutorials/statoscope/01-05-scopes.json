{"hierarchy":{"paths":[["doc:\/\/Statoscope\/tutorials\/StatoscopeTutorial","doc:\/\/Statoscope\/tutorials\/StatoscopeTutorial\/$volume","doc:\/\/Statoscope\/tutorials\/StatoscopeTutorial\/Tutorials"]],"reference":"doc:\/\/Statoscope\/tutorials\/StatoscopeTutorial","modules":[{"projects":[{"sections":[{"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen#Create-a-scope","kind":"task"},{"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen#Create-your-view","kind":"task"},{"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen#Write-tests-and-acceptance-criterias","kind":"task"}],"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen"},{"sections":[{"kind":"task","reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-02-StateWhenAndEffects#What-is-a-side-effect"},{"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-02-StateWhenAndEffects#Typed-effects","kind":"task"}],"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-02-StateWhenAndEffects"},{"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-03-Middleware","sections":[{"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-03-Middleware#Logging-middleware","kind":"task"},{"kind":"task","reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-03-Middleware#Built-in-Library-logging"}]},{"sections":[{"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-04-Injection#Designing-a-Dependency","kind":"task"}],"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-04-Injection"},{"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-05-Scopes","sections":[{"kind":"task","reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-05-Scopes#Designing-Scopes"},{"kind":"task","reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-05-Scopes#Views-and-Scopes"}]}],"reference":"doc:\/\/Statoscope\/tutorials\/StatoscopeTutorial\/Tutorials"}]},"identifier":{"url":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-05-Scopes","interfaceLanguage":"swift"},"sections":[{"estimatedTimeInMinutes":30,"title":"Scopes","kind":"hero","content":[{"inlineContent":[{"text":"In complex applications, managing all state and events in a single Statostore quickly becomes unsustainable. To scale effectively, we need to split the app’s state and events into separate parts or Scopes. This process can sometimes be straightforward, but other times, developers may feel compelled to separate state and events that are closely tied together due to business logic. In this tutorial, we’ll focus on how to organize app state into different scopes to maintain scalability.","type":"text"}],"type":"paragraph"}],"chapter":"Tutorials"},{"kind":"tasks","tasks":[{"stepsSection":[{"code":"01-05-01-code-0001.swift","caption":[],"type":"step","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"We’ll begin by revisiting the example from the previous tutorial, where all the state and logic reside in a single NewsFeed object."}],"type":"paragraph"}]},{"caption":[],"type":"step","code":"01-05-01-code-0002.swift","content":[{"inlineContent":[{"text":"Next, we extend the example to add more functionality, such as loading remote feature toggles at initialization, and implementing list and detail navigation.","type":"text"}],"type":"paragraph"}],"media":null,"runtimePreview":null},{"inlineContent":[{"text":"This business logic could grow in three areas:","type":"text"},{"type":"text","text":" "},{"text":"Feature toggle selection (with possible remote configuration or QA testing UI).","type":"text"},{"text":" ","type":"text"},{"text":"List and detail views (requiring error handling, connectivity feedback, etc.).","type":"text"},{"type":"text","text":" "},{"text":"We’ll start by splitting the current State and When cases into several scopes.","type":"text"}],"type":"paragraph"},{"runtimePreview":null,"media":null,"code":"01-05-01-code-0003.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"First, we’ll separate the feature toggle management from the list. The feature toggle management will remain in the NewsFeed scope, while we remove everything else."}]}],"caption":[]},{"type":"step","media":null,"caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, we create a new scope, NewsFeedList, to manage the list and detail view states and events."}]}],"code":"01-05-01-code-0004.swift"},{"type":"paragraph","inlineContent":[{"text":"During initialization, the app can either be loading feature toggles or displaying the list. The atList variable (whether nil or with a valid value) indicates the current state, connecting the two scopes.","type":"text"}]},{"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We now connect the two scopes using the ChildScope property wrapper. This enables hierarchical dependency resolution and provides access to root middlewares offered by Statoscope."}]}],"caption":[],"media":null,"code":"01-05-01-code-0005.swift"},{"media":null,"runtimePreview":null,"code":"01-05-01-code-0006.swift","type":"step","content":[{"inlineContent":[{"text":"Now, let’s create another scope, NewsFeedArticle, to manage the detail state and events.","type":"text"}],"type":"paragraph"}],"caption":[]},{"content":[{"inlineContent":[{"type":"text","text":"We’ll remove the detail state and When events from the NewsFeedList scope, as they are now handled by the NewsFeedArticle scope."}],"type":"paragraph"}],"caption":[],"media":null,"code":"01-05-01-code-0007.swift","runtimePreview":null,"type":"step"},{"caption":[],"media":null,"content":[{"inlineContent":[{"text":"Some of the initial naming conventions included scope-related clarifications. Now that the logic is split into distinct scopes, we can simplify those names.","type":"text"}],"type":"paragraph"}],"code":"01-05-01-code-0008.swift","runtimePreview":null,"type":"step"},{"type":"paragraph","inlineContent":[{"text":"With our state now organized into three small scopes, development becomes easier, allowing us to focus on smaller subsets of the app. Dependencies can also be declared more precisely for each scope. However, no state is completely isolated. Some shared data (e.g., the favoritesEnabled property) needs to flow between scopes. Additionally, logic such as favorites management is duplicated across NewsFeedList and NewsFeedArticle.","type":"text"}]},{"type":"codeListing","code":["When implementing update methods, you’ll need a default When case to trigger the initial load of child scopes."],"syntax":null},{"media":null,"caption":[],"runtimePreview":null,"type":"step","code":"01-05-01-code-0009.swift","content":[{"inlineContent":[{"type":"text","text":"Finally, declare the When events that are triggered upon the loading of subscopes, if necessary."}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"text":"By organizing your state into hierarchical scopes, you can focus on smaller, more manageable portions of your app’s state and events. Finding the right scope boundaries can be challenging, and they often evolve as the project progresses. As you work with Statoscope, you’ll develop a clearer understanding of scope boundaries.","type":"text"}]}],"contentSection":[{"mediaPosition":"trailing","content":[{"inlineContent":[{"type":"text","text":"We’ll start by taking an overgrown “god object” that handles multiple app use cases and split it into distinct state scopes, making our app more modular and maintainable."}],"type":"paragraph"}],"kind":"contentAndMedia"}],"title":"Designing Scopes","anchor":"Designing-Scopes"},{"title":"Views and Scopes","stepsSection":[{"runtimePreview":null,"code":"01-05-02-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We’ll start by building the NewsFeedView, which initially shows a loading state before transitioning to the list view."}]}],"media":null,"caption":[],"type":"step"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, we’ll add the NewsFeedListView, though we won’t implement navigation to the detail view just yet."}]}],"caption":[],"media":null,"runtimePreview":null,"code":"01-05-02-code-0002.swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In NewsFeedView, we didn’t use a navigation stack. Since users can’t return to the feature toggle selection screen, showing a child scope is simple: we either return it or not based on flow control."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To navigate from the list to the detail view, we’ll use NavigationLink or navigationDestination, mapping our programmatic navigation to the readingArticle subscope. For this, we need to create bindings."}]},{"runtimePreview":null,"content":[{"inlineContent":[{"text":"Focus on the NewsFeedListView.","type":"text"}],"type":"paragraph"}],"type":"step","media":null,"caption":[],"code":"01-05-02-code-0003.swift"},{"runtimePreview":null,"media":null,"type":"step","caption":[],"code":"01-05-02-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Manually construct the bindings to adapt SwiftUI interfaces to the When-based event management system.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Although this state and When mapping to bindings is straightforward, it involves a lot of boilerplate. Fortunately, Statoscope provides helper methods for such mappings and navigations."}]}],"type":"step","caption":[],"media":null,"code":"01-05-02-code-0005.swift","runtimePreview":null},{"type":"step","media":null,"runtimePreview":null,"code":"01-05-02-code-0006.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, we’ll create the article view to display detailed information for each article."}]}],"caption":[]},{"inlineContent":[{"text":"State scopes naturally align with screens, as navigating from a list to a detail typically opens a new scope. Statoscope’s scope and memory management is fully domain-controlled, meaning SwiftUI’s declarative syntax and navigation must adapt by mapping state and events to bindings or closures.","type":"text"}],"type":"paragraph"}],"anchor":"Views-and-Scopes","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"Now that we’ve defined state and scopes, let’s explore how state flows through the scopes by creating the corresponding views.","type":"text"}]}],"mediaPosition":"trailing"}]}]}],"metadata":{"title":"Scopes","role":"project","category":"Statoscope Architecture","categoryPathComponent":"StatoscopeTutorial"},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"project","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/statoscope\/01-05-scopes"]}],"references":{"01-05-02-code-0005.swift":{"highlights":[{"line":20}],"syntax":"swift","type":"file","content":["struct ListView: View {","    @ObservedObject var model: NewsFeedList","    var body: some View {","        NavigationStack {","            ZStack {","                List(model.loadedDTO?.news ?? [], id: \\.id) { item in","                    Text(item.title)","                        .frame(maxWidth: .infinity)","                        .onTapGesture { _ in","                            model.send(.navigateToChild(id: item.id))","                        }","                }","                if model.loading {","                    ProgressView()","                }","            }","        }","        .navigationTitle(\"News\")","        .navigationDestination(","            isPresented: model.bindIsPresented(\\.readingArticle?.id, NewsFeedList.When.navigateToChild)","        ) {","            if let readingArticle = model.readingArticle {","                ArticleView(model: readingArticle)","            }","        }","    }","}"],"identifier":"01-05-02-code-0005.swift","fileName":"NewsFeedListView.swift","fileType":"swift"},"01-05-01-code-0006.swift":{"highlights":[{"line":17},{"line":28}],"syntax":"swift","type":"file","content":["final class NewsFeed: Statostore, ObservableObject {","","    @Published var loadingFeatureToggles: Bool = true","    @Subscope var atList: NewsFeedList?","","    enum When {","        case systemLoadedScope","        case networkReturnsFeatureToggle(Result<[String: String], EquatableError>)","    }","","    @Injected var network: NetworkProvider","    func update(_ when: When) throws { }","}","","final class NewsFeedList: Statostore, ObservableObject {","","    let favoritesEnabled: Bool","    @Published var loadingList: Bool = false","    @Published var loadedListDTO: DTO.FeedList?","    @Published var favorites: [Favorite] = []","","    enum When {","        case networkListDidFinish(DTO.FeedList)","        case navigateFromListToChild(id: String)","        case favorite(id: String)","    }","","    init(favoritesEnabled: Bool) { self.favoritesEnabled = favoritesEnabled }","    @Injected var date: DateProvider","    @Injected var persistence: PersistenceProvider","    @Injected var network: NetworkProvider","    func update(_ when: When) throws { }","}"],"identifier":"01-05-01-code-0006.swift","fileName":"NewsFeed.swift","fileType":"swift"},"doc://Statoscope/tutorials/Statoscope/01-05-Scopes":{"type":"topic","kind":"project","title":"Scopes","role":"project","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-05-Scopes","url":"\/tutorials\/statoscope\/01-05-scopes","estimatedTime":"30min","abstract":[{"type":"text","text":"In complex applications, managing all state and events in a single Statostore quickly becomes unsustainable. To scale effectively, we need to split the app’s state and events into separate parts or Scopes. This process can sometimes be straightforward, but other times, developers may feel compelled to separate state and events that are closely tied together due to business logic. In this tutorial, we’ll focus on how to organize app state into different scopes to maintain scalability."}]},"01-05-02-code-0004.swift":{"highlights":[{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36}],"syntax":"swift","type":"file","content":["struct ListView: View {","    @ObservedObject var model: NewsFeedList","    var body: some View {","        NavigationStack {","            ZStack {","                List(model.loadedDTO?.news ?? [], id: \\.id) { item in","                    Text(item.title)","                        .frame(maxWidth: .infinity)","                        .onTapGesture { _ in","                            model.send(.navigateToChild(id: item.id))","                        }","                }","                if model.loading {","                    ProgressView()","                }","            }","        }","        .navigationTitle(\"News\")","        .navigationDestination(","            isPresented: Binding(","                get: {","                    model.readingArticle != nil","                },","                set: { isPresented in","                    model.send(","                        .navigateToChild(","                            id: isPresented ? model.readingArticle?.id : nil","                        )","                    )","                }","            )","        ) {","            if let readingArticle = model.readingArticle {","                ArticleView(model: readingArticle)","            }","        }","    }","}"],"identifier":"01-05-02-code-0004.swift","fileName":"NewsFeedListView.swift","fileType":"swift"},"doc://Statoscope/tutorials/Statoscope/01-04-Injection#Designing-a-Dependency":{"title":"Designing a Dependency","abstract":[{"type":"text","text":"Learn how to easily design dependencies and inject them into your scopes. Dependency injection simplifies the structure of your code by externalizing the management of dependencies, making your code more modular, testable, and flexible. In this tutorial, we will demonstrate dependency injection using an example of a simple news feed application."}],"url":"\/tutorials\/statoscope\/01-04-injection#Designing-a-Dependency","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-04-Injection#Designing-a-Dependency","role":"pseudoSymbol","type":"section","kind":"section"},"01-05-01-code-0001.swift":{"highlights":[],"syntax":"swift","type":"file","content":["final class NewsFeed: Statostore, ObservableObject {","","    @Published var loadingList: Bool = false","    @Published var loadedListDTOs: DTO?","    @Published var readingArticle: URL?","    @Published var favorites: [Favorite] = []","","    enum When {","        case systemLoadedScope","        case networkDidFinish(DTO)","        case navigateToChild(id: String)","        case favorite(id: String)","    }","","    @Injected var date: DateProvider","    @Injected var persistence: PersistenceProvider","    @Injected var network: NetworkProvider","    func update(_ when: When) throws { }","}"],"identifier":"01-05-01-code-0001.swift","fileName":"NewsFeed.swift","fileType":"swift"},"doc://Statoscope/tutorials/Statoscope/01-05-Scopes#Views-and-Scopes":{"title":"Views and Scopes","abstract":[{"type":"text","text":"In complex applications, managing all state and events in a single Statostore quickly becomes unsustainable. To scale effectively, we need to split the app’s state and events into separate parts or Scopes. This process can sometimes be straightforward, but other times, developers may feel compelled to separate state and events that are closely tied together due to business logic. In this tutorial, we’ll focus on how to organize app state into different scopes to maintain scalability."}],"url":"\/tutorials\/statoscope\/01-05-scopes#Views-and-Scopes","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-05-Scopes#Views-and-Scopes","role":"pseudoSymbol","type":"section","kind":"section"},"doc://Statoscope/tutorials/Statoscope/01-03-Middleware#Logging-middleware":{"title":"Logging middleware","abstract":[{"type":"text","text":"Understand how the single entry point enables pretty interesting features"}],"url":"\/tutorials\/statoscope\/01-03-middleware#Logging-middleware","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-03-Middleware#Logging-middleware","role":"pseudoSymbol","type":"section","kind":"section"},"doc://Statoscope/tutorials/Statoscope/01-02-StateWhenAndEffects":{"abstract":[{"type":"text","text":"Trigger effects that will get back to your scope as a new When event."}],"kind":"project","title":"State, When and Effects","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-02-StateWhenAndEffects","type":"topic","estimatedTime":"30min","url":"\/tutorials\/statoscope\/01-02-statewhenandeffects","role":"project"},"01-05-01-code-0007.swift":{"highlights":[{"line":20},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57}],"syntax":"swift","type":"file","content":["final class NewsFeed: Statostore, ObservableObject {","","    @Published var loadingFeatureToggles: Bool = true","    @Subscope var atList: NewsFeedList?","","    enum When {","        case systemLoadedScope","        case networkReturnsFeatureToggle(Result<[String: String], EquatableError>)","    }","","    @Injected var network: NetworkProvider","    func update(_ when: When) throws { }","}","","final class NewsFeedList: Statostore, ObservableObject {","","    let favoritesEnabled: Bool","    @Published var loadingList: Bool = false","    @Published var loadedListDTO: DTO.FeedList?","    @Subscope var readingArticle: NewsFeedArticle?","    @Published var favorites: [Favorite] = []","","    enum When {","        case networkListDidFinish(DTO.FeedList)","        case navigateFromListToChild(id: String)","        case favorite(id: String)","    }","","    init(favoritesEnabled: Bool) { self.favoritesEnabled = favoritesEnabled }","    @Injected var date: DateProvider","    @Injected var persistence: PersistenceProvider","    @Injected var network: NetworkProvider","    func update(_ when: When) throws { }","}","","final class NewsFeedArticle: Statostore, ObservableObject {","","    let favoritesEnabled: Bool","    let id: String","    @Published var loadingArticle: Bool = false","    @Published var loadedArticleDTO: DTO.Article?","    @Published var favorites: [Favorite] = []","","    enum When {","        case networkDidFinish(DTO.Article)","        case favorite(id: String)","    }","","    init(favoritesEnabled: Bool, id: String) {","        self.favoritesEnabled = favoritesEnabled","        self.id = id","    }","    @Injected var date: DateProvider","    @Injected var persistence: PersistenceProvider","    @Injected var network: NetworkProvider","    func update(_ when: When) throws { }","}"],"identifier":"01-05-01-code-0007.swift","fileName":"NewsFeed.swift","fileType":"swift"},"01-05-02-code-0003.swift":{"highlights":[],"syntax":"swift","type":"file","content":["struct ListView: View {","    @ObservedObject var model: NewsFeedList","    var body: some View {","        NavigationStack {","            ZStack {","                List(model.loadedDTO?.news ?? [], id: \\.id) { item in","                    Text(item.title)","                        .frame(maxWidth: .infinity)","                        .onTapGesture { _ in","                            model.send(.navigateToChild(id: item.id))","                        }","                }","                if model.loading {","                    ProgressView()","                }","            }","        }","        .navigationTitle(\"News\")","    }","}"],"identifier":"01-05-02-code-0003.swift","fileName":"NewsFeedListView.swift","fileType":"swift"},"doc://Statoscope/tutorials/Statoscope/01-01-StateAndWhen#Write-tests-and-acceptance-criterias":{"title":"Write tests and acceptance criterias","abstract":[{"type":"text","text":"Define a scope object with state member variables representing"},{"text":" ","type":"text"},{"type":"text","text":"a part of your app’s status, define the events that may affect"},{"type":"text","text":" "},{"text":"this state, and create a view to display the state.","type":"text"}],"url":"\/tutorials\/statoscope\/01-01-stateandwhen#Write-tests-and-acceptance-criterias","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen#Write-tests-and-acceptance-criterias","role":"pseudoSymbol","type":"section","kind":"section"},"01-05-01-code-0009.swift":{"highlights":[{"line":24},{"line":46}],"syntax":"swift","type":"file","content":["final class NewsFeed: Statostore, ObservableObject {","","    @Published var loadingFeatureToggles: Bool = true","    @Subscope var atList: NewsFeedList?","","    enum When {","        case systemLoadedScope","        case networkReturnsFeatureToggle(Result<[String: String], EquatableError>)","    }","","    @Injected var network: NetworkProvider","    func update(_ when: When) throws { }","}","","final class NewsFeedList: Statostore, ObservableObject {","","    let favoritesEnabled: Bool","    @Published var loading: Bool = false","    @Published var loadedDTO: DTO.FeedList?","    @Subscope var readingArticle: NewsFeedArticle?","    @Published var favorites: [Favorite] = []","","    enum When {","        case defaultWhen \/\/ Should be sent right after initialization","        case networkListDidFinish(DTO.FeedList)","        case navigateFromListToChild(id: String)","        case favorite(id: String)","    }","","    init(favoritesEnabled: Bool) { self.favoritesEnabled = favoritesEnabled }","    @Injected var date: DateProvider","    @Injected var persistence: PersistenceProvider","    @Injected var network: NetworkProvider","    func update(_ when: When) throws { }","}","","final class NewsFeedArticle: Statostore, ObservableObject {","","    let favoritesEnabled: Bool","    let id: String","    @Published var loading: Bool = false","    @Published var loadedDTO: DTO.Article?","    @Published var favorites: [Favorite] = []","","    enum When {","        case defaultWhen \/\/ Should be sent right after initialization","        case networkDidFinish(DTO.Article)","        case favorite(id: String)","    }","","    init(favoritesEnabled: Bool, id: String) {","        self.favoritesEnabled = favoritesEnabled","        self.id = id","    }","    @Injected var date: DateProvider","    @Injected var persistence: PersistenceProvider","    @Injected var network: NetworkProvider","    func update(_ when: When) throws { }","}"],"identifier":"01-05-01-code-0009.swift","fileName":"NewsFeed.swift","fileType":"swift"},"doc://Statoscope/tutorials/StatoscopeTutorial":{"identifier":"doc:\/\/Statoscope\/tutorials\/StatoscopeTutorial","role":"overview","kind":"overview","type":"topic","url":"\/tutorials\/statoscopetutorial","abstract":[{"type":"text","text":"Statoscope is a small library to build apps with state management,"},{"type":"text","text":" "},{"type":"text","text":"testing, effects management and dependency injection."}],"title":"Statoscope basics"},"doc://Statoscope/tutorials/Statoscope/01-02-StateWhenAndEffects#What-is-a-side-effect":{"kind":"section","abstract":[{"type":"text","text":"Trigger effects that will get back to your scope as a new When event."}],"url":"\/tutorials\/statoscope\/01-02-statewhenandeffects#What-is-a-side-effect","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-02-StateWhenAndEffects#What-is-a-side-effect","role":"pseudoSymbol","type":"section","title":"What is a side effect?"},"01-05-02-code-0001.swift":{"highlights":[],"syntax":"swift","type":"file","content":["struct NewsFeedView: View {","    @ObservedObject var model: NewsFeed","    var body: some View {","        if let atList = model.atList {","            ListView(model: atList)","        } else if model.loading {","            Text(\"Loading...\")","        } else {","            AssertNeverDisplayedEmptyView()","        }","    }","}"],"identifier":"01-05-02-code-0001.swift","fileName":"NewsFeedView.swift","fileType":"swift"},"01-05-01-code-0003.swift":{"highlights":[{"line":4}],"syntax":"swift","type":"file","content":["final class NewsFeed: Statostore, ObservableObject {","","    @Published var loadingFeatureToggles: Bool = true","    var atList: NewsFeedList?","","    enum When {","        case systemLoadedScope","        case networkReturnsFeatureToggle(Result<[String: String], EquatableError>)","    }","","    @Injected var network: NetworkProvider","    func update(_ when: When) throws { }","}"],"identifier":"01-05-01-code-0003.swift","fileName":"NewsFeed.swift","fileType":"swift"},"01-05-01-code-0002.swift":{"highlights":[{"line":3},{"line":5},{"line":6},{"line":7},{"line":8},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17}],"syntax":"swift","type":"file","content":["final class NewsFeed: Statostore, ObservableObject {","","    @Published var loadingFeatureToggles: Bool = true","    @Published var loadingList: Bool = false","    @Published var loadedListDTO: DTO.FeedList?","    @Published var readingArticleId: String?","    @Published var loadingArticle: Bool = false","    @Published var loadedArticleDTO: DTO.Article?","    @Published var favorites: [Favorite] = []","","    enum When {","        case systemLoadedScope","        case networkReturnsFeatureToggle(Result<[String: String], EquatableError>)","        case networkListDidFinish(DTO.FeedList)","        case navigateFromListToChild(id: String)","        case networkDidFinish(DTO.Article)","        case favorite","    }","","    @Injected var date: DateProvider","    @Injected var persistence: PersistenceProvider","    @Injected var network: NetworkProvider","    func update(_ when: When) throws { }","}"],"identifier":"01-05-01-code-0002.swift","fileName":"NewsFeed.swift","fileType":"swift"},"01-05-01-code-0008.swift":{"highlights":[{"line":18},{"line":19},{"line":40},{"line":41}],"syntax":"swift","type":"file","content":["final class NewsFeed: Statostore, ObservableObject {","","    @Published var loadingFeatureToggles: Bool = true","    @Subscope var atList: NewsFeedList?","","    enum When {","        case systemLoadedScope","        case networkReturnsFeatureToggle(Result<[String: String], EquatableError>)","    }","","    @Injected var network: NetworkProvider","    func update(_ when: When) throws { }","}","","final class NewsFeedList: Statostore, ObservableObject {","","    let favoritesEnabled: Bool","    @Published var loading: Bool = false","    @Published var loadedDTO: DTO.FeedList?","    @Subscope var readingArticle: NewsFeedArticle?","    @Published var favorites: [Favorite] = []","","    enum When {","        case networkListDidFinish(DTO.FeedList)","        case navigateFromListToChild(id: String)","        case favorite(id: String)","    }","","    init(favoritesEnabled: Bool) { self.favoritesEnabled = favoritesEnabled }","    @Injected var date: DateProvider","    @Injected var persistence: PersistenceProvider","    @Injected var network: NetworkProvider","    func update(_ when: When) throws { }","}","","final class NewsFeedArticle: Statostore, ObservableObject {","","    let favoritesEnabled: Bool","    let id: String","    @Published var loading: Bool = false","    @Published var loadedDTO: DTO.Article?","    @Published var favorites: [Favorite] = []","","    enum When {","        case networkDidFinish(DTO.Article)","        case favorite(id: String)","    }","","    init(favoritesEnabled: Bool, id: String) {","        self.favoritesEnabled = favoritesEnabled","        self.id = id","    }","    @Injected var date: DateProvider","    @Injected var persistence: PersistenceProvider","    @Injected var network: NetworkProvider","    func update(_ when: When) throws { }","}"],"identifier":"01-05-01-code-0008.swift","fileName":"NewsFeed.swift","fileType":"swift"},"doc://Statoscope/tutorials/StatoscopeTutorial/Tutorials":{"kind":"article","abstract":[],"url":"\/tutorials\/statoscopetutorial\/tutorials","identifier":"doc:\/\/Statoscope\/tutorials\/StatoscopeTutorial\/Tutorials","role":"article","type":"topic","title":"Tutorials"},"01-05-01-code-0004.swift":{"highlights":[{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35}],"syntax":"swift","type":"file","content":["final class NewsFeed: Statostore, ObservableObject {","","    @Published var loadingFeatureToggles: Bool = true","    var atList: NewsFeedList?","","    enum When {","        case systemLoadedScope","        case networkReturnsFeatureToggle(Result<[String: String], EquatableError>)","    }","","    @Injected var network: NetworkProvider","    func update(_ when: When) throws { }","}","","final class NewsFeedList: Statostore, ObservableObject {","","    @Published var loadingList: Bool = false","    @Published var loadedListDTO: DTO.FeedList?","    @Published var readingArticleId: String?","    @Published var loadingArticle: Bool = false","    @Published var loadedArticleDTO: DTO.Article?","    @Published var favorites: [Favorite] = []","","    enum When {","        case networkListDidFinish(DTO.FeedList)","        case navigateFromListToChild(id: String)","        case networkDidFinish(DTO.Article)","        case favorite(id: String)","    }","","    @Injected var date: DateProvider","    @Injected var persistence: PersistenceProvider","    @Injected var network: NetworkProvider","    func update(_ when: When) throws { }","}"],"identifier":"01-05-01-code-0004.swift","fileName":"NewsFeed.swift","fileType":"swift"},"01-05-02-code-0002.swift":{"highlights":[{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33}],"syntax":"swift","type":"file","content":["struct NewsFeedView: View {","    @ObservedObject var model: NewsFeed","    var body: some View {","        if let atList = model.atList {","            ListView(model: atList)","        } else if model.loading {","            Text(\"Loading...\")","        } else {","            AssertNeverDisplayedEmptyView()","        }","    }","}","","struct ListView: View {","    @ObservedObject var model: NewsFeedList","    var body: some View {","        NavigationStack {","            ZStack {","                List(model.loadedDTO?.news ?? [], id: \\.id) { item in","                    Text(item.title)","                        .frame(maxWidth: .infinity)","                        .onTapGesture { _ in","                            model.send(.navigateToChild(id: item.id))","                        }","                }","                if model.loading {","                    ProgressView()","                }","            }","        }","        .navigationTitle(\"News\")","    }","}"],"identifier":"01-05-02-code-0002.swift","fileName":"NewsFeedView.swift","fileType":"swift"},"doc://Statoscope/tutorials/Statoscope/01-01-StateAndWhen#Create-your-view":{"kind":"section","abstract":[{"type":"text","text":"Define a scope object with state member variables representing"},{"text":" ","type":"text"},{"type":"text","text":"a part of your app’s status, define the events that may affect"},{"type":"text","text":" "},{"text":"this state, and create a view to display the state.","type":"text"}],"url":"\/tutorials\/statoscope\/01-01-stateandwhen#Create-your-view","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen#Create-your-view","role":"pseudoSymbol","type":"section","title":"Create your view"},"doc://Statoscope/tutorials/Statoscope/01-03-Middleware#Built-in-Library-logging":{"kind":"section","abstract":[{"type":"text","text":"Understand how the single entry point enables pretty interesting features"}],"url":"\/tutorials\/statoscope\/01-03-middleware#Built-in-Library-logging","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-03-Middleware#Built-in-Library-logging","role":"pseudoSymbol","type":"section","title":"Built-in Library logging"},"01-05-02-code-0006.swift":{"highlights":[{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40}],"syntax":"swift","type":"file","content":["struct ListView: View {","    @ObservedObject var model: NewsFeedList","    var body: some View {","        NavigationStack {","            ZStack {","                List(model.loadedDTO?.news ?? [], id: \\.id) { item in","                    Text(item.title)","                        .frame(maxWidth: .infinity)","                        .onTapGesture { _ in","                            model.send(.navigateToChild(id: item.id))","                        }","                }","                if model.loading {","                    ProgressView()","                }","            }","        }","        .navigationTitle(\"News\")","        .navigationDestination(","            isPresented: model.bindIsPresented(\\.readingArticle?.id, NewsFeedList.When.navigateToChild)","        ) {","            if let readingArticle = model.readingArticle {","                ArticleView(model: readingArticle)","            }","        }","    }","}","","struct ArticleView: View {","    @ObservedObject var model: NewsFeedArticle","    var body: some View {","        ZStack {","            Text(model.loadedDTO?.contentMarkdown ?? \"\")","            if model.loading {","                ProgressView()","            }","        }","        .navigationTitle(model.loadedDTO?.title ?? \"\")","    }","}"],"identifier":"01-05-02-code-0006.swift","fileName":"NewsFeedListView.swift","fileType":"swift"},"doc://Statoscope/tutorials/Statoscope/01-03-Middleware":{"type":"topic","kind":"project","title":"Single entry point and\/or middlewares","role":"project","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-03-Middleware","url":"\/tutorials\/statoscope\/01-03-middleware","estimatedTime":"30min","abstract":[{"type":"text","text":"Understand how the single entry point enables pretty interesting features"}]},"doc://Statoscope/tutorials/Statoscope/01-04-Injection":{"identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-04-Injection","role":"project","kind":"project","estimatedTime":"30min","type":"topic","url":"\/tutorials\/statoscope\/01-04-injection","abstract":[{"type":"text","text":"Learn how to easily design dependencies and inject them into your scopes. Dependency injection simplifies the structure of your code by externalizing the management of dependencies, making your code more modular, testable, and flexible. In this tutorial, we will demonstrate dependency injection using an example of a simple news feed application."}],"title":"Dependency Injection"},"doc://Statoscope/tutorials/Statoscope/01-01-StateAndWhen":{"type":"topic","kind":"project","title":"Create a simple Scope","role":"project","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen","url":"\/tutorials\/statoscope\/01-01-stateandwhen","estimatedTime":"20min","abstract":[{"type":"text","text":"Define a scope object with state member variables representing"},{"text":" ","type":"text"},{"text":"a part of your app’s status, define the events that may affect","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"this state, and create a view to display the state."}]},"doc://Statoscope/tutorials/Statoscope/01-02-StateWhenAndEffects#Typed-effects":{"title":"Typed effects","abstract":[{"type":"text","text":"Trigger effects that will get back to your scope as a new When event."}],"url":"\/tutorials\/statoscope\/01-02-statewhenandeffects#Typed-effects","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-02-StateWhenAndEffects#Typed-effects","role":"pseudoSymbol","type":"section","kind":"section"},"01-05-01-code-0005.swift":{"highlights":[{"line":4}],"syntax":"swift","type":"file","content":["final class NewsFeed: Statostore, ObservableObject {","","    @Published var loadingFeatureToggles: Bool = true","    @Subscope var atList: NewsFeedList?","","    enum When {","        case systemLoadedScope","        case networkReturnsFeatureToggle(Result<[String: String], EquatableError>)","    }","","    @Injected var network: NetworkProvider","    func update(_ when: When) throws { }","}","","final class NewsFeedList: Statostore, ObservableObject {","","    @Published var loadingList: Bool = false","    @Published var loadedListDTO: DTO.FeedList?","    @Published var readingArticleId: String?","    @Published var loadingArticle: Bool = false","    @Published var loadedArticleDTO: DTO.Article?","    @Published var favorites: [Favorite] = []","","    enum When {","        case networkListDidFinish(DTO.FeedList)","        case navigateFromListToChild(id: String)","        case networkDidFinish(DTO.Article)","        case favorite(id: String)","    }","","    @Injected var date: DateProvider","    @Injected var persistence: PersistenceProvider","    @Injected var network: NetworkProvider","    func update(_ when: When) throws { }","}"],"identifier":"01-05-01-code-0005.swift","fileName":"NewsFeed.swift","fileType":"swift"},"doc://Statoscope/tutorials/Statoscope/01-01-StateAndWhen#Create-a-scope":{"kind":"section","abstract":[{"type":"text","text":"Define a scope object with state member variables representing"},{"text":" ","type":"text"},{"type":"text","text":"a part of your app’s status, define the events that may affect"},{"type":"text","text":" "},{"text":"this state, and create a view to display the state.","type":"text"}],"url":"\/tutorials\/statoscope\/01-01-stateandwhen#Create-a-scope","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen#Create-a-scope","role":"pseudoSymbol","type":"section","title":"Create a scope"},"doc://Statoscope/tutorials/Statoscope/01-05-Scopes#Designing-Scopes":{"identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-05-Scopes#Designing-Scopes","url":"\/tutorials\/statoscope\/01-05-scopes#Designing-Scopes","role":"pseudoSymbol","abstract":[{"type":"text","text":"In complex applications, managing all state and events in a single Statostore quickly becomes unsustainable. To scale effectively, we need to split the app’s state and events into separate parts or Scopes. This process can sometimes be straightforward, but other times, developers may feel compelled to separate state and events that are closely tied together due to business logic. In this tutorial, we’ll focus on how to organize app state into different scopes to maintain scalability."}],"title":"Designing Scopes","kind":"section","type":"section"}}}