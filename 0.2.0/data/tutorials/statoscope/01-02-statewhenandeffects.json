{"sections":[{"title":"State, When and Effects","chapter":"Tutorials","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Trigger effects that will get back to your scope as a new When event."}]}],"kind":"hero","estimatedTimeInMinutes":30},{"kind":"tasks","tasks":[{"contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"Side effect is the name given to executed code that results in a later or unclear","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"behaviour. As developers, we expect these side effects to be as less as possible, except"},{"text":" ","type":"text"},{"type":"text","text":"for a group of them that are fully expected: the asynchronous tasks. In the current"},{"type":"text","text":" "},{"type":"text","text":"example we will work on the most common async tasks nowadays: network requests, and we"},{"type":"text","text":" "},{"type":"text","text":"will clearly state how they behave and adopt the Statoscope update protocol."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"media":null,"code":"01-02-01-code-0001.swift","type":"step","runtimePreview":null,"caption":[{"inlineContent":[{"text":"Please not how a network call has been splitted into 2 different When events: the","type":"text"},{"type":"text","text":" "},{"text":"trigger and the resulting synchronous action “networkPostCompleted(DTO)”. This","type":"text"},{"type":"text","text":" "},{"text":"way we can continue to work on the synchrnous update + expect policy, core to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the Statoscope library."}],"type":"paragraph"}],"content":[{"inlineContent":[{"text":"Let’s start by looking at the acceptance criteria to understand this new","type":"text"},{"type":"text","text":" "},{"text":"example. We’ll basically build a counter that is stored remotely via a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"network API to save the current state of the counter."},{"type":"text","text":" "},{"type":"text","text":"We may solve the posting \/ synchronization in many different ways. We expect"},{"type":"text","text":" "},{"type":"text","text":"the ACCEPTANCE AS CODE in CloudCounterTests to explain the behavoiur selected"},{"text":" ","type":"text"},{"type":"text","text":"for this example."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"We added the CloudCounter class in the acceptance definition for completeness."},{"type":"text","text":" "},{"text":"Now move the CloudCounter to its own a file CloudCounter.swift.","type":"text"}],"type":"paragraph"}],"code":"01-02-01-code-0002.swift","runtimePreview":null,"caption":[],"media":null,"type":"step"},{"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Part of our business logic needs to make a post request to a network service.","type":"text"},{"type":"text","text":" "},{"text":"As a first step we will build the synchronous logic and leave the postNewValueToNetwork","type":"text"},{"text":" ","type":"text"},{"text":"unimplemented.","type":"text"}]}],"media":null,"code":"01-02-01-code-0003.swift","runtimePreview":null},{"caption":[{"type":"paragraph","inlineContent":[{"text":"We need to use the concurrency framework to connect Effects to the Statoscope","type":"text"},{"type":"text","text":" "},{"text":"library. So implement your request using an async method that returns a new When case","type":"text"},{"type":"text","text":" "},{"text":"as the asynchronous result of our effect","type":"text"}]}],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And now add an effect by using the enqueue method in the ScopeImplementation protocol."}]}],"runtimePreview":null,"code":"01-02-01-code-0004.swift","media":null},{"inlineContent":[{"type":"text","text":"Nice! We’ve created our first scope with effects."}],"type":"paragraph"}],"anchor":"What-is-a-side-effect","title":"What is a side effect?"},{"title":"Typed effects","stepsSection":[{"code":"01-02-02-code-0001.swift","type":"step","runtimePreview":null,"media":null,"caption":[],"content":[{"inlineContent":[{"text":"Create an subclass of Effect that provides a network request execution.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Now go back to our CloudCounter implementation."}],"type":"paragraph"}],"type":"step","caption":[],"media":null,"code":"01-02-01-code-0004.swift","runtimePreview":null},{"caption":[],"media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And change the anonymous enqueue to use the typed enqueuing."}]}],"type":"step","code":"01-02-02-code-0002.swift"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"NOW: you can benefit of observability and cancellation. Please see how we"},{"type":"text","text":" "},{"text":"can check if the effect is already running and (if desired) we can cancel it.","type":"text"}]}],"media":null,"runtimePreview":null,"type":"step","code":"01-02-02-code-0003.swift","caption":[]},{"runtimePreview":null,"type":"step","caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Let’s go back to our testing code before ending this section","type":"text"}]}],"code":"01-02-02-code-0004.swift"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When Effects are typed, they can be included in our testing code, to check"},{"type":"text","text":" "},{"type":"text","text":"which effects are being enqueued, as part of our checks."}]}],"code":"01-02-02-code-0005.swift","runtimePreview":null,"type":"step","media":null,"caption":[]}],"anchor":"Typed-effects","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the previous section, we enqueued and anonymous effect. However we strongly recommend"},{"type":"text","text":" "},{"text":"to work with typed effects in production code to achieve testability, cancellability and","type":"text"},{"text":" ","type":"text"},{"text":"observability. Let’s dive into typed effects.","type":"text"}]}],"mediaPosition":"trailing"}]}]},{"kind":"callToAction","title":"Single entry point and\/or middlewares","featuredEyebrow":"Tutorial","abstract":[{"type":"text","text":"Understand how the single entry point enables pretty interesting features"}],"action":{"isActive":true,"overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"overridingTitle":"Get started","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-03-Middleware","type":"reference"}}],"hierarchy":{"reference":"doc:\/\/Statoscope\/tutorials\/StatoscopeTutorial","modules":[{"reference":"doc:\/\/Statoscope\/tutorials\/StatoscopeTutorial\/Tutorials","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen#Create-a-scope"},{"kind":"task","reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen#Create-your-view"},{"kind":"task","reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen#Write-tests-and-acceptance-criterias"}],"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen"},{"sections":[{"kind":"task","reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-02-StateWhenAndEffects#What-is-a-side-effect"},{"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-02-StateWhenAndEffects#Typed-effects","kind":"task"}],"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-02-StateWhenAndEffects"},{"sections":[{"kind":"task","reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-03-Middleware#Logging-middleware"},{"kind":"task","reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-03-Middleware#Built-in-Library-logging"}],"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-03-Middleware"},{"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-04-Injection","sections":[{"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-04-Injection#Designing-a-Dependency","kind":"task"}]},{"sections":[{"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-05-Scopes#Designing-Scopes","kind":"task"},{"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-05-Scopes#Views-and-Scopes","kind":"task"}],"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-05-Scopes"}]}],"paths":[["doc:\/\/Statoscope\/tutorials\/StatoscopeTutorial","doc:\/\/Statoscope\/tutorials\/StatoscopeTutorial\/$volume","doc:\/\/Statoscope\/tutorials\/StatoscopeTutorial\/Tutorials"]]},"metadata":{"role":"project","category":"Statoscope Architecture","title":"State, When and Effects","categoryPathComponent":"StatoscopeTutorial"},"kind":"project","schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"paths":["\/tutorials\/statoscope\/01-02-statewhenandeffects"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-02-StateWhenAndEffects"},"references":{"01-02-02-code-0002.swift":{"fileType":"swift","content":["import Statoscope","","enum Network {","    static func buildURLRequestPosting(dto: DTO) throws -> URLRequest {","        guard let url = URL(string: \"http:\/\/statoscope.com\") else {","            throw Error()","        }","        var request = URLRequest(url: url)","        request.setValue(\"application\/json\", forHTTPHeaderField: \"Content-Type\")","        request.httpMethod = \"POST\"","        request.httpBody = try JSONEncoder().encode(dto)","        return request","    }","}","","struct DTO: Codable {","    let count: Int","}","","final class CloudCounter: ScopeImplementation {","    var viewDisplaysTotalCount: Int = 0","    var viewShowsLoadingAndDisablesButtons: Bool = false","    enum When {","        case userTappedIncrementButton","        case userTappedDecrementButton","        case networkPostCompleted(DTO)","    }","","    func update(_ when: When) throws {","        switch when {","        case .userTappedIncrementButton:","            viewDisplaysTotalCount = viewDisplaysTotalCount + 1","            viewShowsLoadingAndDisablesButtons = true","            try postNewValueToNetwork(newValue: viewDisplaysTotalCount)","        case .userTappedDecrementButton:","            guard viewDisplaysTotalCount > 0 else {","                return","            }","            viewDisplaysTotalCount = viewDisplaysTotalCount - 1","            viewShowsLoadingAndDisablesButtons = true","            try postNewValueToNetwork(newValue: viewDisplaysTotalCount)","        case .networkPostCompleted(let remoteCounter):","            viewShowsLoadingAndDisablesButtons = false","            viewDisplaysTotalCount = remoteCounter.count","        }","    }","","    private func postNewValueToNetwork(newValue: Int) {","        effectsState.enqueue(","            Network.Effect<DTO>(request: try Network.buildURLRequestPosting(dto: DTO(count: newValue)))","                .map(When.networkPostCompleted)","        )","    }","}"],"highlights":[{"line":6},{"line":48},{"line":50},{"line":51}],"type":"file","syntax":"swift","identifier":"01-02-02-code-0002.swift","fileName":"CloudCounter.swift"},"doc://Statoscope/tutorials/Statoscope/01-05-Scopes":{"type":"topic","kind":"project","title":"Scopes","role":"project","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-05-Scopes","url":"\/tutorials\/statoscope\/01-05-scopes","estimatedTime":"30min","abstract":[{"type":"text","text":"In complex applications, managing all state and events in a single Statostore quickly becomes unsustainable. To scale effectively, we need to split the app’s state and events into separate parts or Scopes. This process can sometimes be straightforward, but other times, developers may feel compelled to separate state and events that are closely tied together due to business logic. In this tutorial, we’ll focus on how to organize app state into different scopes to maintain scalability."}]},"01-02-02-code-0003.swift":{"fileName":"CloudCounter.swift","content":["import Statoscope","","enum Network {","    static func buildURLRequestPosting(dto: DTO) throws -> URLRequest {","        guard let url = URL(string: \"http:\/\/statoscope.com\") else {","            throw Error()","        }","        var request = URLRequest(url: url)","        request.setValue(\"application\/json\", forHTTPHeaderField: \"Content-Type\")","        request.httpMethod = \"POST\"","        request.httpBody = try JSONEncoder().encode(dto)","        return request","    }","}","","struct DTO: Codable {","    let count: Int","}","","final class CloudCounter: ScopeImplementation {","    var viewDisplaysTotalCount: Int = 0","    var viewShowsLoadingAndDisablesButtons: Bool = false","    enum When {","        case userTappedIncrementButton","        case userTappedDecrementButton","        case networkPostCompleted(DTO)","    }","","    func update(_ when: When) throws {","        switch when {","        case .userTappedIncrementButton:","            viewDisplaysTotalCount = viewDisplaysTotalCount + 1","            viewShowsLoadingAndDisablesButtons = true","            try postNewValueToNetwork(newValue: viewDisplaysTotalCount)","        case .userTappedDecrementButton:","            guard viewDisplaysTotalCount > 0 else {","                return","            }","            viewDisplaysTotalCount = viewDisplaysTotalCount - 1","            viewShowsLoadingAndDisablesButtons = true","            try postNewValueToNetwork(newValue: viewDisplaysTotalCount)","        case .networkPostCompleted(let remoteCounter):","            viewShowsLoadingAndDisablesButtons = false","            viewDisplaysTotalCount = remoteCounter.count","        }","    }","","    private func postNewValueToNetwork(newValue: Int) throws {","","        \/\/ Solution 1: cancel any previous network effect","        effectsState.cancelEffect { $0 is NetworkEffect<DTO> }","","        \/\/ Solution 2: do nothing if an effect is already running","        guard nil == effects.first(where: { $0 is NetworkEffect<DTO> }) else {","            throw InvalidStateError()","        }","","        enqueue(","            Network.Effect<DTO>(request: try Network.buildURLRequestPosting(dto: DTO(count: newValue)))","                .map(When.networkPostCompleted)","        )","    }","}"],"highlights":[{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58}],"syntax":"swift","type":"file","identifier":"01-02-02-code-0003.swift","fileType":"swift"},"doc://Statoscope/tutorials/Statoscope/01-01-StateAndWhen#Create-a-scope":{"kind":"section","abstract":[{"type":"text","text":"Define a scope object with state member variables representing"},{"text":" ","type":"text"},{"type":"text","text":"a part of your app’s status, define the events that may affect"},{"type":"text","text":" "},{"text":"this state, and create a view to display the state.","type":"text"}],"url":"\/tutorials\/statoscope\/01-01-stateandwhen#Create-a-scope","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen#Create-a-scope","role":"pseudoSymbol","type":"section","title":"Create a scope"},"doc://Statoscope/tutorials/Statoscope/01-05-Scopes#Designing-Scopes":{"identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-05-Scopes#Designing-Scopes","url":"\/tutorials\/statoscope\/01-05-scopes#Designing-Scopes","role":"pseudoSymbol","abstract":[{"type":"text","text":"In complex applications, managing all state and events in a single Statostore quickly becomes unsustainable. To scale effectively, we need to split the app’s state and events into separate parts or Scopes. This process can sometimes be straightforward, but other times, developers may feel compelled to separate state and events that are closely tied together due to business logic. In this tutorial, we’ll focus on how to organize app state into different scopes to maintain scalability."}],"title":"Designing Scopes","kind":"section","type":"section"},"doc://Statoscope/tutorials/Statoscope/01-01-StateAndWhen#Write-tests-and-acceptance-criterias":{"title":"Write tests and acceptance criterias","abstract":[{"type":"text","text":"Define a scope object with state member variables representing"},{"text":" ","type":"text"},{"type":"text","text":"a part of your app’s status, define the events that may affect"},{"type":"text","text":" "},{"text":"this state, and create a view to display the state.","type":"text"}],"url":"\/tutorials\/statoscope\/01-01-stateandwhen#Write-tests-and-acceptance-criterias","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen#Write-tests-and-acceptance-criterias","role":"pseudoSymbol","type":"section","kind":"section"},"01-02-02-code-0004.swift":{"fileType":"swift","content":["import StatoscopeTesting","","final class CloudCounterTest: XCTestCase {","","    func testUserFlow() throws {","","        var expectedNetworkRequest = URLRequest(url: try XCTUnwrap(URL(string: \"http:\/\/statoscope.com\")))","        expectedNetworkRequest.setValue(\"application\/json\", forHTTPHeaderField: \"Content-Type\")","        expectedNetworkRequest.httpMethod = \"POST\"","        expectedNetworkRequest.httpBody = try JSONEncoder().encode(DTO(count: 0))","","        try CloudCounter.GIVEN {","            CloudCounter()","        }","        .THEN(\\.viewDisplaysTotalCount, equals: 0)","        .THEN(\\.viewShowsLoadingAndDisablesButtons, equals: false)","        \/\/ Increment","        .WHEN(.userTappedIncrementButton)","        .THEN(\\.viewDisplaysTotalCount, equals: 1)","        .THEN(\\.viewShowsLoadingAndDisablesButtons, equals: true)","        .WHEN(.networkPostCompleted(DTO(count: 1)))","        .THEN(\\.viewDisplaysTotalCount, equals: 1)","        .THEN(\\.viewShowsLoadingAndDisablesButtons, equals: false)","        \/\/ Decrement","        .WHEN(.userTappedDecrementButton)","        .THEN(\\.viewDisplaysTotalCount, equals: 0)","        .THEN(\\.viewShowsLoadingAndDisablesButtons, equals: true)","        .WHEN(.networkPostCompleted(DTO(count: 0)))","        .THEN(\\.viewDisplaysTotalCount, equals: 0)","        .THEN(\\.viewShowsLoadingAndDisablesButtons, equals: false)","        \/\/ Invalid decrement","        .WHEN(.userTappedDecrementButton)","        .THEN(\\.viewDisplaysTotalCount, equals: 0)","        .runTest()","    }","","}"],"highlights":[],"type":"file","syntax":"swift","identifier":"01-02-02-code-0004.swift","fileName":"CloudCounterTests.swift"},"01-02-01-code-0003.swift":{"fileName":"CloudCounter.swift","content":["import Statoscope","","struct DTO: Codable {","    let count: Int","}","","final class CloudCounter: ScopeImplementation {","    var viewDisplaysTotalCount: Int = 0","    var viewShowsLoadingAndDisablesButtons: Bool = false","    enum When {","        case userTappedIncrementButton","        case userTappedDecrementButton","        case networkPostCompleted(DTO)","    }","","    func update(_ when: When) throws {","        switch when {","        case .userTappedIncrementButton:","            viewDisplaysTotalCount = viewDisplaysTotalCount + 1","            viewShowsLoadingAndDisablesButtons = true","            try postNewValueToNetwork(newValue: viewDisplaysTotalCount)","        case .userTappedDecrementButton:","            guard viewDisplaysTotalCount > 0 else {","                return","            }","            viewDisplaysTotalCount = viewDisplaysTotalCount - 1","            viewShowsLoadingAndDisablesButtons = true","            try postNewValueToNetwork(newValue: viewDisplaysTotalCount)","        case .networkPostCompleted(let remoteCounter):","            viewShowsLoadingAndDisablesButtons = false","            viewDisplaysTotalCount = remoteCounter.count","        }","    }","","    private func postNewValueToNetwork(newValue: Int) throws {","        \/\/ TODO post the new value to the network","    }","}"],"highlights":[{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37}],"syntax":"swift","type":"file","identifier":"01-02-01-code-0003.swift","fileType":"swift"},"doc://Statoscope/tutorials/Statoscope/01-03-Middleware#Logging-middleware":{"title":"Logging middleware","abstract":[{"type":"text","text":"Understand how the single entry point enables pretty interesting features"}],"url":"\/tutorials\/statoscope\/01-03-middleware#Logging-middleware","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-03-Middleware#Logging-middleware","role":"pseudoSymbol","type":"section","kind":"section"},"doc://Statoscope/tutorials/Statoscope/01-04-Injection#Designing-a-Dependency":{"title":"Designing a Dependency","abstract":[{"type":"text","text":"Learn how to easily design dependencies and inject them into your scopes. Dependency injection simplifies the structure of your code by externalizing the management of dependencies, making your code more modular, testable, and flexible. In this tutorial, we will demonstrate dependency injection using an example of a simple news feed application."}],"url":"\/tutorials\/statoscope\/01-04-injection#Designing-a-Dependency","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-04-Injection#Designing-a-Dependency","role":"pseudoSymbol","type":"section","kind":"section"},"01-02-01-code-0002.swift":{"fileType":"swift","content":["import Statoscope","","struct DTO: Codable {","    let count: Int","}","","final class CloudCounter: ScopeImplementation {","    var viewDisplaysTotalCount: Int = 0","    var viewShowsLoadingAndDisablesButtons: Bool = false","    enum When {","        case userTappedIncrementButton","        case userTappedDecrementButton","        case networkPostCompleted(DTO)","    }","","    func update(_ when: When) throws {}","}"],"highlights":[],"type":"file","syntax":"swift","identifier":"01-02-01-code-0002.swift","fileName":"CloudCounter.swift"},"doc://Statoscope/tutorials/Statoscope/01-02-StateWhenAndEffects#Typed-effects":{"title":"Typed effects","abstract":[{"type":"text","text":"Trigger effects that will get back to your scope as a new When event."}],"url":"\/tutorials\/statoscope\/01-02-statewhenandeffects#Typed-effects","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-02-StateWhenAndEffects#Typed-effects","role":"pseudoSymbol","type":"section","kind":"section"},"doc://Statoscope/tutorials/Statoscope/01-03-Middleware#Built-in-Library-logging":{"kind":"section","abstract":[{"type":"text","text":"Understand how the single entry point enables pretty interesting features"}],"url":"\/tutorials\/statoscope\/01-03-middleware#Built-in-Library-logging","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-03-Middleware#Built-in-Library-logging","role":"pseudoSymbol","type":"section","title":"Built-in Library logging"},"doc://Statoscope/tutorials/Statoscope/01-01-StateAndWhen#Create-your-view":{"kind":"section","abstract":[{"type":"text","text":"Define a scope object with state member variables representing"},{"text":" ","type":"text"},{"type":"text","text":"a part of your app’s status, define the events that may affect"},{"type":"text","text":" "},{"text":"this state, and create a view to display the state.","type":"text"}],"url":"\/tutorials\/statoscope\/01-01-stateandwhen#Create-your-view","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen#Create-your-view","role":"pseudoSymbol","type":"section","title":"Create your view"},"doc://Statoscope/tutorials/Statoscope/01-03-Middleware":{"type":"topic","kind":"project","title":"Single entry point and\/or middlewares","role":"project","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-03-Middleware","url":"\/tutorials\/statoscope\/01-03-middleware","estimatedTime":"30min","abstract":[{"type":"text","text":"Understand how the single entry point enables pretty interesting features"}]},"01-02-02-code-0001.swift":{"fileName":"NetworkEffect.swift","content":["import Statoscope","","extension Network {","    struct Effect<Response: Decodable>: Effect {","        let request: URLRequest","        func runEffect() async throws -> Response {","            try JSONDecoder().decode(Response.self, from: try await URLSession.shared.data(for: request).0)","        }","    }","}"],"highlights":[],"syntax":"swift","type":"file","identifier":"01-02-02-code-0001.swift","fileType":"swift"},"01-02-02-code-0005.swift":{"fileType":"swift","content":["import StatoscopeTesting","","final class CloudCounterTest: XCTestCase {","","    func testUserFlow() throws {","","        var expectedNetworkRequest = URLRequest(url: try XCTUnwrap(URL(string: \"http:\/\/statoscope.com\")))","        expectedNetworkRequest.setValue(\"application\/json\", forHTTPHeaderField: \"Content-Type\")","        expectedNetworkRequest.httpMethod = \"POST\"","        expectedNetworkRequest.httpBody = try JSONEncoder().encode(DTO(count: 0))","","        try CloudCounter.GIVEN {","            CloudCounter()","        }","        .THEN(\\.viewDisplaysTotalCount, equals: 0)","        .THEN(\\.viewShowsLoadingAndDisablesButtons, equals: false)","        \/\/ Increment","        .WHEN(.userTappedIncrementButton)","        .THEN(\\.viewDisplaysTotalCount, equals: 1)","        .THEN(\\.viewShowsLoadingAndDisablesButtons, equals: true)","        .THEN_EnquedEffect(Network.Effect<DTO>(request: expectedNetworkRequest))","        .WHEN(.networkPostCompleted(DTO(count: 1)))","        .THEN(\\.viewDisplaysTotalCount, equals: 1)","        .THEN(\\.viewShowsLoadingAndDisablesButtons, equals: false)","        .THEN { XCTAssertEqual($0.effects.count, 0) }","        \/\/ Decrement","        .WHEN(.userTappedDecrementButton)","        .THEN(\\.viewDisplaysTotalCount, equals: 0)","        .THEN(\\.viewShowsLoadingAndDisablesButtons, equals: true)","        .WHEN(.networkPostCompleted(DTO(count: 0)))","        .THEN(\\.viewDisplaysTotalCount, equals: 0)","        .THEN(\\.viewShowsLoadingAndDisablesButtons, equals: false)","        \/\/ Invalid decrement","        .WHEN(.userTappedDecrementButton)","        .THEN(\\.viewDisplaysTotalCount, equals: 0)","        .runTest()","    }","","}"],"highlights":[{"line":21},{"line":25}],"type":"file","syntax":"swift","identifier":"01-02-02-code-0005.swift","fileName":"CloudCounterTests.swift"},"doc://Statoscope/tutorials/Statoscope/01-01-StateAndWhen":{"type":"topic","kind":"project","title":"Create a simple Scope","role":"project","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen","url":"\/tutorials\/statoscope\/01-01-stateandwhen","estimatedTime":"20min","abstract":[{"type":"text","text":"Define a scope object with state member variables representing"},{"text":" ","type":"text"},{"text":"a part of your app’s status, define the events that may affect","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"this state, and create a view to display the state."}]},"doc://Statoscope/tutorials/Statoscope/01-05-Scopes#Views-and-Scopes":{"title":"Views and Scopes","abstract":[{"type":"text","text":"In complex applications, managing all state and events in a single Statostore quickly becomes unsustainable. To scale effectively, we need to split the app’s state and events into separate parts or Scopes. This process can sometimes be straightforward, but other times, developers may feel compelled to separate state and events that are closely tied together due to business logic. In this tutorial, we’ll focus on how to organize app state into different scopes to maintain scalability."}],"url":"\/tutorials\/statoscope\/01-05-scopes#Views-and-Scopes","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-05-Scopes#Views-and-Scopes","role":"pseudoSymbol","type":"section","kind":"section"},"doc://Statoscope/tutorials/StatoscopeTutorial/Tutorials":{"kind":"article","abstract":[],"url":"\/tutorials\/statoscopetutorial\/tutorials","identifier":"doc:\/\/Statoscope\/tutorials\/StatoscopeTutorial\/Tutorials","role":"article","type":"topic","title":"Tutorials"},"01-02-01-code-0001.swift":{"fileName":"CloudCounterTests.swift","content":["import StatoscopeTesting","","struct DTO: Codable {","    let count: Int","}","","final class CloudCounter: ScopeImplementation {","    var viewDisplaysTotalCount: Int = 0","    var viewShowsLoadingAndDisablesButtons: Bool = false","    enum When {","        case userTappedIncrementButton","        case userTappedDecrementButton","        case networkPostCompleted(DTO)","    }","","    func update(_ when: When) throws {}","}","","final class CloudCounterTest: XCTestCase {","","    func testUserFlow() throws {","        try CloudCounter.GIVEN {","            CloudCounter()","        }","        .THEN(\\.viewDisplaysTotalCount, equals: 0)","        .THEN(\\.viewShowsLoadingAndDisablesButtons, equals: false)","        \/\/ Increment","        .WHEN(.userTappedIncrementButton)","        .THEN(\\.viewDisplaysTotalCount, equals: 1)","        .THEN(\\.viewShowsLoadingAndDisablesButtons, equals: true)","        .WHEN(.networkPostCompleted(DTO(count: 1)))","        .THEN(\\.viewDisplaysTotalCount, equals: 1)","        .THEN(\\.viewShowsLoadingAndDisablesButtons, equals: false)","        \/\/ Decrement","        .WHEN(.userTappedDecrementButton)","        .THEN(\\.viewDisplaysTotalCount, equals: 0)","        .THEN(\\.viewShowsLoadingAndDisablesButtons, equals: true)","        .WHEN(.networkPostCompleted(DTO(count: 0)))","        .THEN(\\.viewDisplaysTotalCount, equals: 0)","        .THEN(\\.viewShowsLoadingAndDisablesButtons, equals: false)","        \/\/ Invalid decrement","        .WHEN(.userTappedDecrementButton)","        .THEN(\\.viewDisplaysTotalCount, equals: 0)","        .runTest()","    }","","}"],"highlights":[],"syntax":"swift","type":"file","identifier":"01-02-01-code-0001.swift","fileType":"swift"},"01-02-01-code-0004.swift":{"fileType":"swift","content":["import Statoscope","","enum Network {","    static func buildURLRequestPosting(dto: DTO) throws -> URLRequest {","        guard let url = URL(string: \"http:\/\/statoscope.com\") else {","            throw InvalidStateError()","        }","        var request = URLRequest(url: url)","        request.setValue(\"application\/json\", forHTTPHeaderField: \"Content-Type\")","        request.httpMethod = \"POST\"","        request.httpBody = try JSONEncoder().encode(dto)","        return request","    }","}","","struct DTO: Codable {","    let count: Int","}","","final class CloudCounter: ScopeImplementation {","    var viewDisplaysTotalCount: Int = 0","    var viewShowsLoadingAndDisablesButtons: Bool = false","    enum When {","        case userTappedIncrementButton","        case userTappedDecrementButton","        case networkPostCompleted(DTO)","    }","","    func update(_ when: When) throws {","        switch when {","        case .userTappedIncrementButton:","            viewDisplaysTotalCount = viewDisplaysTotalCount + 1","            viewShowsLoadingAndDisablesButtons = true","            try postNewValueToNetwork(newValue: viewDisplaysTotalCount)","        case .userTappedDecrementButton:","            guard viewDisplaysTotalCount > 0 else {","                return","            }","            viewDisplaysTotalCount = viewDisplaysTotalCount - 1","            viewShowsLoadingAndDisablesButtons = true","            try postNewValueToNetwork(newValue: viewDisplaysTotalCount)","        case .networkPostCompleted(let remoteCounter):","            viewShowsLoadingAndDisablesButtons = false","            viewDisplaysTotalCount = remoteCounter.count","        }","    }","","    private func postNewValueToNetwork(newValue: Int) throws {","        effectsState.enqueue(","            AnyEffect {","                let request = try Network.buildURLRequestPosting(dto: DTO(count: self.viewDisplaysTotalCount))","                let resDTO = try JSONDecoder().decode(DTO.self, from: try await URLSession.shared.data(for: request).0)","                return When.networkPostCompleted(resDTO)","            }","        )","    }","}"],"highlights":[],"type":"file","syntax":"swift","identifier":"01-02-01-code-0004.swift","fileName":"CloudCounter.swift"},"doc://Statoscope/tutorials/Statoscope/01-02-StateWhenAndEffects":{"abstract":[{"type":"text","text":"Trigger effects that will get back to your scope as a new When event."}],"kind":"project","title":"State, When and Effects","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-02-StateWhenAndEffects","type":"topic","estimatedTime":"30min","url":"\/tutorials\/statoscope\/01-02-statewhenandeffects","role":"project"},"doc://Statoscope/tutorials/Statoscope/01-04-Injection":{"identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-04-Injection","role":"project","kind":"project","estimatedTime":"30min","type":"topic","url":"\/tutorials\/statoscope\/01-04-injection","abstract":[{"type":"text","text":"Learn how to easily design dependencies and inject them into your scopes. Dependency injection simplifies the structure of your code by externalizing the management of dependencies, making your code more modular, testable, and flexible. In this tutorial, we will demonstrate dependency injection using an example of a simple news feed application."}],"title":"Dependency Injection"},"doc://Statoscope/tutorials/StatoscopeTutorial":{"identifier":"doc:\/\/Statoscope\/tutorials\/StatoscopeTutorial","role":"overview","kind":"overview","type":"topic","url":"\/tutorials\/statoscopetutorial","abstract":[{"type":"text","text":"Statoscope is a small library to build apps with state management,"},{"type":"text","text":" "},{"type":"text","text":"testing, effects management and dependency injection."}],"title":"Statoscope basics"},"doc://Statoscope/tutorials/Statoscope/01-02-StateWhenAndEffects#What-is-a-side-effect":{"kind":"section","abstract":[{"type":"text","text":"Trigger effects that will get back to your scope as a new When event."}],"url":"\/tutorials\/statoscope\/01-02-statewhenandeffects#What-is-a-side-effect","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-02-StateWhenAndEffects#What-is-a-side-effect","role":"pseudoSymbol","type":"section","title":"What is a side effect?"}}}