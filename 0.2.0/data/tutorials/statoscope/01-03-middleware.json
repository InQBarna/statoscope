{"hierarchy":{"paths":[["doc:\/\/Statoscope\/tutorials\/StatoscopeTutorial","doc:\/\/Statoscope\/tutorials\/StatoscopeTutorial\/$volume","doc:\/\/Statoscope\/tutorials\/StatoscopeTutorial\/Tutorials"]],"reference":"doc:\/\/Statoscope\/tutorials\/StatoscopeTutorial","modules":[{"reference":"doc:\/\/Statoscope\/tutorials\/StatoscopeTutorial\/Tutorials","projects":[{"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen","sections":[{"kind":"task","reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen#Create-a-scope"},{"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen#Create-your-view","kind":"task"},{"kind":"task","reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen#Write-tests-and-acceptance-criterias"}]},{"sections":[{"kind":"task","reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-02-StateWhenAndEffects#What-is-a-side-effect"},{"kind":"task","reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-02-StateWhenAndEffects#Typed-effects"}],"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-02-StateWhenAndEffects"},{"sections":[{"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-03-Middleware#Logging-middleware","kind":"task"},{"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-03-Middleware#Built-in-Library-logging","kind":"task"}],"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-03-Middleware"},{"sections":[{"kind":"task","reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-04-Injection#Designing-a-Dependency"}],"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-04-Injection"},{"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-05-Scopes","sections":[{"reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-05-Scopes#Designing-Scopes","kind":"task"},{"kind":"task","reference":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-05-Scopes#Views-and-Scopes"}]}]}]},"identifier":{"url":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-03-Middleware","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"project","sections":[{"estimatedTimeInMinutes":30,"chapter":"Tutorials","kind":"hero","title":"Single entry point and\/or middlewares","content":[{"inlineContent":[{"text":"Understand how the single entry point enables pretty interesting features","type":"text"}],"type":"paragraph"}]},{"kind":"tasks","tasks":[{"stepsSection":[{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s grab our first counter example adding some error throwing to illustrate the current example."}]}],"type":"step","media":null,"code":"01-03-01-code-0001.swift","runtimePreview":null},{"code":"01-03-01-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"text":"And the CounterView with no protection to avoid the throw.","type":"text"}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"01-03-01-code-0003.swift","runtimePreview":null,"type":"step","content":[{"inlineContent":[{"text":"A middleware can be added to trap all events in the scope. Logging is straightforward,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"either for terminal logging, analytics, or crash reports."}],"type":"paragraph"}],"caption":[],"media":null},{"type":"paragraph","inlineContent":[{"text":"Having a comprehensive crash and analytics reporting is mandatory in production apps.","type":"text"},{"text":" ","type":"text"},{"text":"A single entry point\/middleware enables easy implementation for these features.","type":"text"}]}],"anchor":"Logging-middleware","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Logging is an important part of the code. Debugging is great, but sometimes the scheduler"},{"type":"text","text":" "},{"text":"is affected by our breakpoints, and having understandable logs may help us getting rid of","type":"text"},{"text":" ","type":"text"},{"text":"some bugs.","type":"text"}]}]}],"title":"Logging middleware"},{"title":"Built-in Library logging","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The error reporting added in the previous step is great. Terminal logging however is unnecessary."},{"text":" ","type":"text"},{"type":"text","text":"Statoscope has a built in feature for logging. See how to use it."}]}],"mediaPosition":"trailing"}],"anchor":"Built-in-Library-logging","stepsSection":[{"media":null,"code":"01-03-01-code-0004.swift","type":"step","runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Enable the logging globally inyour app."}],"type":"paragraph"}]},{"caption":[],"runtimePreview":null,"content":[{"inlineContent":[{"text":"This is the output of the terminal when playing around with the app.","type":"text"}],"type":"paragraph"}],"code":"01-03-01-code-0005.txt","type":"step","media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"The single entry point enables Statoscope to build many of its features internally."},{"text":" ","type":"text"},{"type":"text","text":"A middleware can be added to the Statostore so user can also benefit from the single entry point."}]}]}]},{"featuredEyebrow":"Tutorial","action":{"type":"reference","isActive":true,"overridingTitle":"Get started","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-04-Injection","overridingTitleInlineContent":[{"type":"text","text":"Get started"}]},"abstract":[{"type":"text","text":"Learn how to easily design dependencies and inject them into your scopes. Dependency injection simplifies the structure of your code by externalizing the management of dependencies, making your code more modular, testable, and flexible. In this tutorial, we will demonstrate dependency injection using an example of a simple news feed application."}],"title":"Dependency Injection","kind":"callToAction"}],"metadata":{"category":"Statoscope Architecture","role":"project","title":"Single entry point and\/or middlewares","categoryPathComponent":"StatoscopeTutorial"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/statoscope\/01-03-middleware"]}],"references":{"doc://Statoscope/tutorials/Statoscope/01-02-StateWhenAndEffects":{"abstract":[{"type":"text","text":"Trigger effects that will get back to your scope as a new When event."}],"kind":"project","title":"State, When and Effects","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-02-StateWhenAndEffects","type":"topic","estimatedTime":"30min","url":"\/tutorials\/statoscope\/01-02-statewhenandeffects","role":"project"},"doc://Statoscope/tutorials/StatoscopeTutorial/Tutorials":{"kind":"article","abstract":[],"url":"\/tutorials\/statoscopetutorial\/tutorials","identifier":"doc:\/\/Statoscope\/tutorials\/StatoscopeTutorial\/Tutorials","role":"article","type":"topic","title":"Tutorials"},"01-03-01-code-0003.swift":{"type":"file","syntax":"swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14}],"content":["import Statoscope","import SwiftUI","","private struct CounterView: View {","","    @StateObject var model = Counter()","        .addMiddleWare { store, when, forward in","            do {","                print(\"WHEN: \\(when)\")","                try forward(when)","            } catch {","                sendCrashReport(error)\u0004","            }","        }","","    var body: some View {","        VStack {","            Text(\"\\(model.viewDisplaysTotalCount)\")","            HStack {","                Button(\"+\") {","                    model.send(.userTappedIncrementButton)","                }","                Button(\"-\") {","                    model.send(.userTappedDecrementButton)","                }","            }","        }","    }","}"],"fileType":"swift","fileName":"CounterView.swift","identifier":"01-03-01-code-0003.swift"},"doc://Statoscope/tutorials/Statoscope/01-01-StateAndWhen#Create-your-view":{"kind":"section","abstract":[{"type":"text","text":"Define a scope object with state member variables representing"},{"text":" ","type":"text"},{"type":"text","text":"a part of your app’s status, define the events that may affect"},{"type":"text","text":" "},{"text":"this state, and create a view to display the state.","type":"text"}],"url":"\/tutorials\/statoscope\/01-01-stateandwhen#Create-your-view","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen#Create-your-view","role":"pseudoSymbol","type":"section","title":"Create your view"},"doc://Statoscope/tutorials/Statoscope/01-02-StateWhenAndEffects#Typed-effects":{"title":"Typed effects","abstract":[{"type":"text","text":"Trigger effects that will get back to your scope as a new When event."}],"url":"\/tutorials\/statoscope\/01-02-statewhenandeffects#Typed-effects","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-02-StateWhenAndEffects#Typed-effects","role":"pseudoSymbol","type":"section","kind":"section"},"01-03-01-code-0004.swift":{"type":"file","syntax":"swift","highlights":[],"content":["import Statoscope","","StatoscopeLogger.logLevel = LogLevel.all"],"fileType":"swift","fileName":"App.swift","identifier":"01-03-01-code-0004.swift"},"01-03-01-code-0001.swift":{"fileName":"Counter.swift","content":["import Statoscope","","private final class Counter: Scope, ObservableObject {","","    @Published var viewDisplaysTotalCount: Int = 0","","    enum When {","        case userTappedIncrementButton","        case userTappedDecrementButton","    }","","    func update(_ when: When) throws {","        \/* ... *\/","    }","}"],"highlights":[],"type":"file","syntax":"swift","identifier":"01-03-01-code-0001.swift","fileType":"swift"},"doc://Statoscope/tutorials/Statoscope/01-03-Middleware":{"type":"topic","kind":"project","title":"Single entry point and\/or middlewares","role":"project","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-03-Middleware","url":"\/tutorials\/statoscope\/01-03-middleware","estimatedTime":"30min","abstract":[{"type":"text","text":"Understand how the single entry point enables pretty interesting features"}]},"01-03-01-code-0005.txt":{"identifier":"01-03-01-code-0005.txt","content":["Counter (0x00006000037d1d00): userTappedIncrementButton","Counter (0x00006000037d1d00):","-   viewDisplaysTotalCount: 0","+   viewDisplaysTotalCount: 1","Counter (0x00006000037d1d00): userTappedDecrementButton","Counter (0x00006000037d1d00):","-   viewDisplaysTotalCount: 1","+   viewDisplaysTotalCount: 0","Counter (0x00006000037d1d00): userTappedDecrementButton","Counter (0x00e4dec0): ‼️ Exception on send method: InvalidStateError()"],"fileName":"console.txt","fileType":"txt","syntax":"txt","type":"file","highlights":[]},"doc://Statoscope/tutorials/Statoscope/01-03-Middleware#Logging-middleware":{"title":"Logging middleware","abstract":[{"type":"text","text":"Understand how the single entry point enables pretty interesting features"}],"url":"\/tutorials\/statoscope\/01-03-middleware#Logging-middleware","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-03-Middleware#Logging-middleware","role":"pseudoSymbol","type":"section","kind":"section"},"doc://Statoscope/tutorials/Statoscope/01-05-Scopes#Designing-Scopes":{"identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-05-Scopes#Designing-Scopes","url":"\/tutorials\/statoscope\/01-05-scopes#Designing-Scopes","role":"pseudoSymbol","abstract":[{"type":"text","text":"In complex applications, managing all state and events in a single Statostore quickly becomes unsustainable. To scale effectively, we need to split the app’s state and events into separate parts or Scopes. This process can sometimes be straightforward, but other times, developers may feel compelled to separate state and events that are closely tied together due to business logic. In this tutorial, we’ll focus on how to organize app state into different scopes to maintain scalability."}],"title":"Designing Scopes","kind":"section","type":"section"},"01-03-01-code-0002.swift":{"type":"file","identifier":"01-03-01-code-0002.swift","fileName":"CounterView.swift","syntax":"swift","fileType":"swift","content":["import Statoscope","import SwiftUI","","private struct CounterView: View {","","    @StateObject var model = Counter()","","    var body: some View {","        VStack {","            Text(\"\\(model.viewDisplaysTotalCount)\")","            HStack {","                Button(\"+\") {","                    model.send(.userTappedIncrementButton)","                }","                Button(\"-\") {","                    model.send(.userTappedDecrementButton)","                }","            }","        }","    }","}"],"highlights":[]},"doc://Statoscope/tutorials/Statoscope/01-01-StateAndWhen#Create-a-scope":{"kind":"section","abstract":[{"type":"text","text":"Define a scope object with state member variables representing"},{"text":" ","type":"text"},{"type":"text","text":"a part of your app’s status, define the events that may affect"},{"type":"text","text":" "},{"text":"this state, and create a view to display the state.","type":"text"}],"url":"\/tutorials\/statoscope\/01-01-stateandwhen#Create-a-scope","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen#Create-a-scope","role":"pseudoSymbol","type":"section","title":"Create a scope"},"doc://Statoscope/tutorials/StatoscopeTutorial":{"identifier":"doc:\/\/Statoscope\/tutorials\/StatoscopeTutorial","role":"overview","kind":"overview","type":"topic","url":"\/tutorials\/statoscopetutorial","abstract":[{"type":"text","text":"Statoscope is a small library to build apps with state management,"},{"type":"text","text":" "},{"type":"text","text":"testing, effects management and dependency injection."}],"title":"Statoscope basics"},"doc://Statoscope/tutorials/Statoscope/01-05-Scopes#Views-and-Scopes":{"title":"Views and Scopes","abstract":[{"type":"text","text":"In complex applications, managing all state and events in a single Statostore quickly becomes unsustainable. To scale effectively, we need to split the app’s state and events into separate parts or Scopes. This process can sometimes be straightforward, but other times, developers may feel compelled to separate state and events that are closely tied together due to business logic. In this tutorial, we’ll focus on how to organize app state into different scopes to maintain scalability."}],"url":"\/tutorials\/statoscope\/01-05-scopes#Views-and-Scopes","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-05-Scopes#Views-and-Scopes","role":"pseudoSymbol","type":"section","kind":"section"},"doc://Statoscope/tutorials/Statoscope/01-02-StateWhenAndEffects#What-is-a-side-effect":{"kind":"section","abstract":[{"type":"text","text":"Trigger effects that will get back to your scope as a new When event."}],"url":"\/tutorials\/statoscope\/01-02-statewhenandeffects#What-is-a-side-effect","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-02-StateWhenAndEffects#What-is-a-side-effect","role":"pseudoSymbol","type":"section","title":"What is a side effect?"},"doc://Statoscope/tutorials/Statoscope/01-01-StateAndWhen#Write-tests-and-acceptance-criterias":{"title":"Write tests and acceptance criterias","abstract":[{"type":"text","text":"Define a scope object with state member variables representing"},{"text":" ","type":"text"},{"type":"text","text":"a part of your app’s status, define the events that may affect"},{"type":"text","text":" "},{"text":"this state, and create a view to display the state.","type":"text"}],"url":"\/tutorials\/statoscope\/01-01-stateandwhen#Write-tests-and-acceptance-criterias","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen#Write-tests-and-acceptance-criterias","role":"pseudoSymbol","type":"section","kind":"section"},"doc://Statoscope/tutorials/Statoscope/01-03-Middleware#Built-in-Library-logging":{"kind":"section","abstract":[{"type":"text","text":"Understand how the single entry point enables pretty interesting features"}],"url":"\/tutorials\/statoscope\/01-03-middleware#Built-in-Library-logging","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-03-Middleware#Built-in-Library-logging","role":"pseudoSymbol","type":"section","title":"Built-in Library logging"},"doc://Statoscope/tutorials/Statoscope/01-04-Injection":{"identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-04-Injection","role":"project","kind":"project","estimatedTime":"30min","type":"topic","url":"\/tutorials\/statoscope\/01-04-injection","abstract":[{"type":"text","text":"Learn how to easily design dependencies and inject them into your scopes. Dependency injection simplifies the structure of your code by externalizing the management of dependencies, making your code more modular, testable, and flexible. In this tutorial, we will demonstrate dependency injection using an example of a simple news feed application."}],"title":"Dependency Injection"},"doc://Statoscope/tutorials/Statoscope/01-05-Scopes":{"type":"topic","kind":"project","title":"Scopes","role":"project","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-05-Scopes","url":"\/tutorials\/statoscope\/01-05-scopes","estimatedTime":"30min","abstract":[{"type":"text","text":"In complex applications, managing all state and events in a single Statostore quickly becomes unsustainable. To scale effectively, we need to split the app’s state and events into separate parts or Scopes. This process can sometimes be straightforward, but other times, developers may feel compelled to separate state and events that are closely tied together due to business logic. In this tutorial, we’ll focus on how to organize app state into different scopes to maintain scalability."}]},"doc://Statoscope/tutorials/Statoscope/01-04-Injection#Designing-a-Dependency":{"title":"Designing a Dependency","abstract":[{"type":"text","text":"Learn how to easily design dependencies and inject them into your scopes. Dependency injection simplifies the structure of your code by externalizing the management of dependencies, making your code more modular, testable, and flexible. In this tutorial, we will demonstrate dependency injection using an example of a simple news feed application."}],"url":"\/tutorials\/statoscope\/01-04-injection#Designing-a-Dependency","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-04-Injection#Designing-a-Dependency","role":"pseudoSymbol","type":"section","kind":"section"},"doc://Statoscope/tutorials/Statoscope/01-01-StateAndWhen":{"type":"topic","kind":"project","title":"Create a simple Scope","role":"project","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen","url":"\/tutorials\/statoscope\/01-01-stateandwhen","estimatedTime":"20min","abstract":[{"type":"text","text":"Define a scope object with state member variables representing"},{"text":" ","type":"text"},{"text":"a part of your app’s status, define the events that may affect","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"this state, and create a view to display the state."}]}}}