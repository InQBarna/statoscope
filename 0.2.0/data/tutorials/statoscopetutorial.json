{"metadata":{"title":"Statoscope basics","categoryPathComponent":"StatoscopeTutorial","category":"Statoscope Architecture","role":"overview","estimatedTime":"2hr 20min"},"kind":"overview","identifier":{"url":"doc:\/\/Statoscope\/tutorials\/StatoscopeTutorial","interfaceLanguage":"swift"},"sections":[{"action":{"type":"reference","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"overridingTitle":"Get started","isActive":true},"kind":"hero","title":"Statoscope basics","content":[{"type":"paragraph","inlineContent":[{"text":"Statoscope is a small library to build apps with state management,","type":"text"},{"type":"text","text":" "},{"text":"testing, effects management and dependency injection.","type":"text"}]}]},{"chapters":[{"name":"Tutorials","content":[{"type":"paragraph","inlineContent":[{"text":"Jump into how state scopes are created, how to define When events,","type":"text"},{"type":"text","text":" "},{"text":"write acceptance test, trigger side effects or inject params to subscopes.","type":"text"}]}],"tutorials":["doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen","doc:\/\/Statoscope\/tutorials\/Statoscope\/01-02-StateWhenAndEffects","doc:\/\/Statoscope\/tutorials\/Statoscope\/01-03-Middleware","doc:\/\/Statoscope\/tutorials\/Statoscope\/01-04-Injection","doc:\/\/Statoscope\/tutorials\/Statoscope\/01-05-Scopes"]}],"content":[],"name":null,"image":null,"kind":"volume"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/statoscopetutorial"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[],"reference":"doc:\/\/Statoscope\/tutorials\/StatoscopeTutorial"},"references":{"doc://Statoscope/tutorials/Statoscope/01-05-Scopes":{"type":"topic","kind":"project","title":"Scopes","role":"project","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-05-Scopes","url":"\/tutorials\/statoscope\/01-05-scopes","estimatedTime":"30min","abstract":[{"type":"text","text":"In complex applications, managing all state and events in a single Statostore quickly becomes unsustainable. To scale effectively, we need to split the app’s state and events into separate parts or Scopes. This process can sometimes be straightforward, but other times, developers may feel compelled to separate state and events that are closely tied together due to business logic. In this tutorial, we’ll focus on how to organize app state into different scopes to maintain scalability."}]},"doc://Statoscope/tutorials/Statoscope/01-01-StateAndWhen":{"type":"topic","kind":"project","title":"Create a simple Scope","role":"project","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-01-StateAndWhen","url":"\/tutorials\/statoscope\/01-01-stateandwhen","estimatedTime":"20min","abstract":[{"type":"text","text":"Define a scope object with state member variables representing"},{"text":" ","type":"text"},{"text":"a part of your app’s status, define the events that may affect","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"this state, and create a view to display the state."}]},"doc://Statoscope/tutorials/Statoscope/01-03-Middleware":{"type":"topic","kind":"project","title":"Single entry point and\/or middlewares","role":"project","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-03-Middleware","url":"\/tutorials\/statoscope\/01-03-middleware","estimatedTime":"30min","abstract":[{"type":"text","text":"Understand how the single entry point enables pretty interesting features"}]},"doc://Statoscope/tutorials/Statoscope/01-02-StateWhenAndEffects":{"abstract":[{"type":"text","text":"Trigger effects that will get back to your scope as a new When event."}],"kind":"project","title":"State, When and Effects","identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-02-StateWhenAndEffects","type":"topic","estimatedTime":"30min","url":"\/tutorials\/statoscope\/01-02-statewhenandeffects","role":"project"},"doc://Statoscope/tutorials/Statoscope/01-04-Injection":{"identifier":"doc:\/\/Statoscope\/tutorials\/Statoscope\/01-04-Injection","role":"project","kind":"project","estimatedTime":"30min","type":"topic","url":"\/tutorials\/statoscope\/01-04-injection","abstract":[{"type":"text","text":"Learn how to easily design dependencies and inject them into your scopes. Dependency injection simplifies the structure of your code by externalizing the management of dependencies, making your code more modular, testable, and flexible. In this tutorial, we will demonstrate dependency injection using an example of a simple news feed application."}],"title":"Dependency Injection"},"doc://Statoscope/tutorials/StatoscopeTutorial":{"identifier":"doc:\/\/Statoscope\/tutorials\/StatoscopeTutorial","role":"overview","kind":"overview","type":"topic","url":"\/tutorials\/statoscopetutorial","abstract":[{"type":"text","text":"Statoscope is a small library to build apps with state management,"},{"type":"text","text":" "},{"type":"text","text":"testing, effects management and dependency injection."}],"title":"Statoscope basics"}}}