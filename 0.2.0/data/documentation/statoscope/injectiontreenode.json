{"variants":[{"paths":["\/documentation\/statoscope\/injectiontreenode"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Statoscope\/documentation\/Statoscope\/InjectionTreeNode"},"abstract":[{"text":"Represents a node in a tree of dependencies search to achieve a dependency","type":"text"},{"type":"text","text":" "},{"type":"text","text":"injection similar to what environmentObject achieves in swiftUI"}],"relationshipsSections":[{"type":"inheritsFrom","identifiers":["doc:\/\/Statoscope\/documentation\/Statoscope\/InjectionTreeNodeProtocol"],"kind":"relationships","title":"Inherits From"},{"identifiers":["doc:\/\/Statoscope\/documentation\/Statoscope\/Scope","doc:\/\/Statoscope\/documentation\/Statoscope\/Statostore"],"type":"inheritedBy","kind":"relationships","title":"Inherited By"}],"metadata":{"roleHeading":"Protocol","modules":[{"name":"Statoscope"}],"role":"symbol","symbolKind":"protocol","navigatorTitle":[{"text":"InjectionTreeNode","kind":"identifier"}],"externalID":"s:10Statoscope17InjectionTreeNodeP","title":"InjectionTreeNode","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"InjectionTreeNode","kind":"identifier"}]},"topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/Statoscope\/documentation\/Statoscope\/InjectionTreeNode\/injectObject(_:)-1k237","doc:\/\/Statoscope\/documentation\/Statoscope\/InjectionTreeNode\/injectSuperscopeForTesting(_:)"]}],"sections":[],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Statoscope\/documentation\/Statoscope"]]},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"InjectionTreeNode"},{"kind":"text","text":" : AnyObject, "},{"identifier":"doc:\/\/Statoscope\/documentation\/Statoscope\/InjectionTreeNodeProtocol","preciseIdentifier":"s:10Statoscope25InjectionTreeNodeProtocolP","kind":"typeIdentifier","text":"InjectionTreeNodeProtocol"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"By conforming to this protocol, your class object automatically synthesizes","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An injection store to hold ad-hoc injected values"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Parent + children properties to connect to a dependency tree, enabled when using the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Statoscope\/documentation\/Statoscope\/Subscope"},{"type":"text","text":" property wrapper"}]}]}],"type":"unorderedList"},{"type":"heading","level":3,"text":"Ad-hoc injections","anchor":"Ad-hoc-injections"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inject an object into a Tree node by calling injectObject. Please note the object is retained."}]},{"type":"codeListing","syntax":"swift","code":["let node: YourScope = ...","node.injectObject(InjectedClock(currentDate: { Date(timeIntervalSinceReferenceDate: 0) }))"]},{"inlineContent":[{"type":"text","text":"Later you can resolve the object either by calling"}],"type":"paragraph"},{"type":"codeListing","code":["final class YourScope: Statostore {","  func update(_ when: When) throws {","     let clock: InjectedClock = self.resolve()","     print(\"current time: \\(clock.currentTime)\")","  }","}"],"syntax":"swift"},{"inlineContent":[{"text":"or using the Injected property wrapper","type":"text"}],"type":"paragraph"},{"code":["final class YourScope: Statostore {","  @Injected var clock: InjectedClock","  func update(_ when: When) throws {","     print(\"current time: \\(clock.currentTime)\")","  }","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Superscope-injections","text":"Superscope injections","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"When another scope is inside your superscopes tree, an automatic injection occurs. Please see the example:"}]},{"type":"codeListing","code":["final class YourScope: Statostore {","  let name: String","  @Subscope var childScope: YourChildScope?","}","final class YourChildScope: Statostore {","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Superscope can be retrieved either by calling"}],"type":"paragraph"},{"type":"codeListing","code":["final class YourChildScope: Statostore {","  func update(_ when: When) throws {","     let superscope: YourScope = self.resolve()","     print(\"Name: \\(superscope.name)\")","  }","}"],"syntax":"swift"},{"inlineContent":[{"text":"or using the Injected property wrapper","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["final class YourChildScope: Statostore {","  @Superscope var superscope: YourScope","  func update(_ when: When) throws {","     print(\"Name: \\(superscope.name)\")","  }","}"]}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://Statoscope/documentation/Statoscope/Subscope":{"abstract":[],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Subscope"}],"title":"Subscope","kind":"symbol","url":"\/documentation\/statoscope\/subscope","navigatorTitle":[{"kind":"identifier","text":"Subscope"}],"identifier":"doc:\/\/Statoscope\/documentation\/Statoscope\/Subscope","role":"symbol"},"doc://Statoscope/documentation/Statoscope/InjectionTreeNode":{"url":"\/documentation\/statoscope\/injectiontreenode","title":"InjectionTreeNode","identifier":"doc:\/\/Statoscope\/documentation\/Statoscope\/InjectionTreeNode","kind":"symbol","type":"topic","abstract":[{"text":"Represents a node in a tree of dependencies search to achieve a dependency","type":"text"},{"type":"text","text":" "},{"text":"injection similar to what environmentObject achieves in swiftUI","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectionTreeNode"}],"navigatorTitle":[{"kind":"identifier","text":"InjectionTreeNode"}]},"doc://Statoscope/documentation/Statoscope/Statostore":{"url":"\/documentation\/statoscope\/statostore","kind":"symbol","title":"Statostore","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Statostore","kind":"identifier"}],"abstract":[{"type":"text","text":"An Statostore is the Naive’s solution to implement State + Store + Reducer combination"}],"identifier":"doc:\/\/Statoscope\/documentation\/Statoscope\/Statostore","type":"topic","role":"symbol","navigatorTitle":[{"text":"Statostore","kind":"identifier"}]},"doc://Statoscope/documentation/Statoscope/InjectionTreeNodeProtocol":{"url":"\/documentation\/statoscope\/injectiontreenodeprotocol","kind":"symbol","title":"InjectionTreeNodeProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectionTreeNodeProtocol"}],"abstract":[{"type":"text","text":"Artifact protocol, please refer to "},{"identifier":"doc:\/\/Statoscope\/documentation\/Statoscope\/InjectionTreeNode","isActive":true,"type":"reference"},{"type":"text","text":" for features"},{"type":"text","text":" "},{"text":"This protocol simply enables both InjectionTreeNode and InjectionTreeNode?","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"struct to conform to the same protocol and be used in the Subscope property wrapper"}],"identifier":"doc:\/\/Statoscope\/documentation\/Statoscope\/InjectionTreeNodeProtocol","type":"topic","role":"symbol","navigatorTitle":[{"text":"InjectionTreeNodeProtocol","kind":"identifier"}]},"doc://Statoscope/documentation/Statoscope/InjectionTreeNode/injectSuperscopeForTesting(_:)":{"role":"symbol","title":"injectSuperscopeForTesting(_:)","type":"topic","identifier":"doc:\/\/Statoscope\/documentation\/Statoscope\/InjectionTreeNode\/injectSuperscopeForTesting(_:)","abstract":[],"url":"\/documentation\/statoscope\/injectiontreenode\/injectsuperscopefortesting(_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"injectSuperscopeForTesting","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}]},"doc://Statoscope/documentation/Statoscope/InjectionTreeNode/injectObject(_:)-1k237":{"url":"\/documentation\/statoscope\/injectiontreenode\/injectobject(_:)-1k237","title":"injectObject(_:)","identifier":"doc:\/\/Statoscope\/documentation\/Statoscope\/InjectionTreeNode\/injectObject(_:)-1k237","type":"topic","kind":"symbol","required":true,"abstract":[],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"injectObject"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Self","kind":"typeIdentifier"}],"defaultImplementations":1},"doc://Statoscope/documentation/Statoscope/Scope":{"url":"\/documentation\/statoscope\/scope","kind":"symbol","title":"Scope","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Scope","kind":"identifier"}],"abstract":[{"type":"text","text":"An Scope is the specification of a piece of the app’s state and business model"}],"identifier":"doc:\/\/Statoscope\/documentation\/Statoscope\/Scope","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Scope"}]},"doc://Statoscope/documentation/Statoscope":{"role":"collection","abstract":[{"type":"text","text":"A lightweight library for managing state in iOS applications, designed with simplicity, testability, and scalability in mind."}],"identifier":"doc:\/\/Statoscope\/documentation\/Statoscope","type":"topic","url":"\/documentation\/statoscope","kind":"symbol","title":"Statoscope"}}}